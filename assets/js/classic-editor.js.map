{"version":3,"file":"classic-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/DateTimePicker.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/ToggleCalendarDatePicker.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/external var \"ReactDOM\"","webpack://post-expirator/external var \"publishpressFutureClassicEditorConfig\"","webpack://post-expirator/external var \"wp\"","webpack://post-expirator/external var \"wp.components\"","webpack://post-expirator/external var \"wp.data\"","webpack://post-expirator/external var \"wp.element\"","webpack://post-expirator/external var \"wp.hooks\"","webpack://post-expirator/external var \"wp.url\"","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/classic-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState  } from \"&wp.element\";\nimport { CheckboxControl as WPCheckboxControl } from \"&wp.components\";\n\nexport const CheckboxControl = function (props) {\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { normalizeUnixTimeToMilliseconds } from \"../time\";\nimport { DateTimePicker as WPDateTimePicker } from \"&wp.components\";\n\n\nexport const DateTimePicker = ({currentDate, onChange, is12Hour, startOfWeek}) => {\n    if (typeof currentDate === 'number') {\n        currentDate = normalizeUnixTimeToMilliseconds(currentDate);\n    }\n\n    return (\n        <WPDateTimePicker\n            currentDate={currentDate}\n            onChange={onChange}\n            __nextRemoveHelpButton={true}\n            is12Hour={is12Hour}\n            startOfWeek={startOfWeek}\n        />\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleCalendarDatePicker } from './ToggleCalendarDatePicker';\n\nconst { PanelRow, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl } = wp.components;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n\n    const [validationError, setValidationError] = useState('');\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible,\n        setHasValidData\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        if (!taxonomy) {\n            return;\n        }\n\n        setIsFetchingTerms(true);\n\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${taxonomy}`),\n        }).then((result) => {\n            result.terms.forEach(term => {\n                termsListByName[decodeEntities(term.name)] = term;\n                termsListById[term.id] = decodeEntities(term.name);\n            });\n\n            setTermsListByName(termsListByName);\n            setTermsListById(termsListById);\n            setTaxonomyName(decodeEntities(result.taxonomyName));\n            setIsFetchingTerms(false);\n        });\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid();\n        }\n\n        if (! hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid();\n        }\n    }, [hasValidData]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n    let is24hour;\n    if (props.timeFormat === 'inherited') {\n        is24hour = ! props.is12Hour;\n    } else {\n        is24hour = props.timeFormat === '24h';\n    }\n\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n    // Remove items from actions list if related to taxonomies and there is no taxonmoy for the post type\n    let actionsSelectOptions = props.actionsSelectOptions;\n    if (! props.taxonomy) {\n        actionsSelectOptions = props.actionsSelectOptions.filter((item) => {\n            return ['category', 'category-add', 'category-remove', 'category-remove-all'].indexOf(item.value) === -1;\n        });\n    }\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n    const displayTaxonomyField = String(action).includes('category') && action !== 'category-remove-all';\n\n    let termsFieldLabel = taxonomyName;\n    switch (action) {\n        case 'category':\n            termsFieldLabel = props.strings.newTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-remove':\n            termsFieldLabel = props.strings.removeTerms.replace('%s', taxonomyName);\n            break;\n        case 'category-add':\n            termsFieldLabel = props.strings.addTerms.replace('%s', taxonomyName);\n            break;\n    }\n\n    const validateData = () => {\n        let valid = true;\n\n        if (! enabled) {\n            setValidationError('');\n            return true;\n        }\n\n        if (! action) {\n            setValidationError(props.strings.errorActionRequired);\n            valid = false;\n        }\n\n        if (! date) {\n            setValidationError(props.strings.errorDateRequired);\n            valid = false;\n        }\n\n        const isTermRequired = ['category', 'category-add', 'category-remove'].includes(action);\n        const noTermIsSelected = terms.length === 0 || (terms.length === 1 && (terms[0] === '' || terms[0] === '0'));\n\n        if (isTermRequired && noTermIsSelected) {\n            setValidationError(props.strings.errorTermsRequired);\n            valid = false;\n        }\n\n        if (valid) {\n            setValidationError('');\n        }\n\n        return valid;\n    }\n\n    useEffect(() => {\n        if (! enabled) {\n            setHasValidData(true);\n            setValidationError('');\n\n            return;\n        }\n\n        setHasValidData(validateData());\n    }, [action, date, enabled, terms, taxonomy]);\n\n    return (\n        <div className={panelClass}>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={contentPanelClass + ' future-action-full-width'}>\n                        <SelectControl\n                            label={props.strings.action}\n                            value={action}\n                            options={actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n                    </PanelRow>\n\n                    {\n                        displayTaxonomyField && (\n                            isFetchingTerms && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName}>\n                                        {`${props.strings.loading} (${taxonomyName})`}\n                                        <Spinner />\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                            || (!taxonomy && (\n                                <PanelRow>\n                                    <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                        <div>\n                                            <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                        </div>\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <PanelRow>\n                                            <BaseControl label={taxonomyName} className=\"future-action-warning\">\n                                                <div>\n                                                    <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                                </div>\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                    || (\n                                        <PanelRow className=\"future-action-full-width\">\n                                            <BaseControl>\n                                                <FormTokenField\n                                                    label={termsFieldLabel}\n                                                    value={selectedTerms}\n                                                    suggestions={termsListByNameKeys}\n                                                    onChange={handleTermsChange}\n                                                    placeholder={props.strings.addTermsPlaceholder}\n                                                    maxSuggestions={1000}\n                                                    __experimentalExpandOnFocus={true}\n                                                    __experimentalAutoSelectFirstMatch={true}\n                                                />\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={datePanelClass}>\n                        <ToggleCalendarDatePicker\n                            currentDate={date}\n                            onChangeDate={handleDateChange}\n                            onToggleCalendar={() => setCalendarIsVisible(!calendarIsVisible)}\n                            is12Hour={!is24hour}\n                            startOfWeek={props.startOfWeek}\n                            isExpanded={calendarIsVisible}\n                            strings={props.strings}\n                        />\n                    </PanelRow>\n\n                    <PanelRow>\n                        <div className=\"future-action-help-text\">\n                            <hr />\n\n                            <span className=\"dashicons dashicons-info\"></span> {HelpText}\n                        </div>\n                    </PanelRow>\n\n                    {! hasValidData && (\n                        <PanelRow>\n                            <BaseControl label={props.strings.validationError} className=\"future-action-error\">\n                                <div>\n                                    <i className=\"dashicons dashicons-warning\"></i> {validationError}\n                                </div>\n                            </BaseControl>\n                        </PanelRow>\n                    )}\n                </Fragment>\n            )}\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    const { lockPostSaving, unlockPostSaving } = useDispatch('core/editor');\n\n    const onDataIsValid = () => {\n        unlockPostSaving('future-action');\n    }\n\n    const onDataIsInvalid = () => {\n        lockPostSaving('future-action');\n    }\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings}\n                    onDataIsValid={onDataIsValid}\n                    onDataIsInvalid={onDataIsInvalid} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n    const { useEffect } = wp.element;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    useEffect(() => {\n        // We are not using onDataIsValid and onDataIsInvalid because we need to enable/disable the button\n        // also based on the changeAction value.\n        if (hasValidData || changeAction === 'no-change') {\n            jQuery('#bulk_edit').prop('disabled', false);\n        } else {\n            jQuery('#bulk_edit').prop('disabled', true);\n        }\n    }, [hasValidData, changeAction]);\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12Hour={props.is12Hour}\n                    timeFormat={props.timeFormat}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\nimport { select, useSelect } from \"&wp.data\";\nimport { useEffect } from \"&wp.element\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const getTermsFromElementByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return [];\n        }\n\n        let terms = element.value.split(',');\n\n        if (terms.length === 1 && terms[0] === '') {\n            terms = [];\n        }\n\n        return terms.map(term => parseInt(term));\n    }\n\n    const getElementValueByName = (name) => {\n        const element = getElementByName(name);\n        if (!element) {\n            return '';\n        }\n\n        return element.value;\n    }\n\n    const data = {\n        enabled: getElementValueByName('future_action_enabled') === '1',\n        action: getElementValueByName('future_action_action'),\n        date: getElementValueByName('future_action_date'),\n        terms: getTermsFromElementByName('future_action_terms'),\n        taxonomy: getElementValueByName('future_action_taxonomy'),\n    };\n\n    const onDataIsValid = () => {\n        jQuery('#publish').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('#publish').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\nimport { useSelect, select } from '&wp.data';\nimport { useEffect } from '&wp.element';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const hasValidData = useSelect((select) => select(props.storeName).getHasValidData(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const onDataIsValid = () => {\n        jQuery('.button-primary.save').prop('disabled', false);\n    }\n\n    const onDataIsInvalid = () => {\n        jQuery('.button-primary.save').prop('disabled', true);\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12Hour={props.is12Hour}\n                timeFormat={props.timeFormat}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings}\n                onDataIsValid={onDataIsValid}\n                onDataIsInvalid={onDataIsInvalid} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action ? action : ''} />\n            <input type=\"hidden\" name={'future_action_date'} value={date ? date : ''} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString ? termsString : ''} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy ? taxonomy : ''} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const NonceControl = function (props) {\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\nimport { useEffect, useState } from '&wp.element';\nimport { addQueryArgs } from '&wp.url';\nimport { applyFilters } from '&wp.hooks';\nimport { apiFetch } from '&wp';\n\nconst { PanelRow, BaseControl } = wp.components;\n\nexport const PostTypeSettingsPanel = function (props) {\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n    const [hasValidData, setHasValidData] = useState(false);\n    const [validationError, setValidationError] = useState('');\n    const [taxonomyLabel, setTaxonomyLabel] = useState('');\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    const validateData = () => {\n        if (! isActive || ! postTypeTaxonomy) {\n            setValidationError('');\n            return true;\n        }\n\n        // Add validation rules here...\n\n        setValidationError('');\n        return true;\n    }\n\n    useEffect(() => {\n        if (!postTypeTaxonomy || !props.taxonomiesList) {\n            return;\n        }\n\n        setTermsSelectIsLoading(true);\n        apiFetch({\n            path: addQueryArgs(`publishpress-future/v1/terms/${postTypeTaxonomy}`),\n        }).then((result) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n\n            result.terms.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setSelectedTerms(settingsTermsOptions);\n            setTermsSelectIsLoading(false);\n        });\n    }, [postTypeTaxonomy]);\n\n    useEffect(() => {\n        props.taxonomiesList.forEach((taxonomy) => {\n            if (taxonomy.value === postTypeTaxonomy) {\n                setTaxonomyLabel(taxonomy.label);\n            }\n        });\n\n        setHasValidData(validateData());\n    }, [isActive, postTypeTaxonomy, selectedTerms, settingHowToExpire, taxonomyLabel]);\n\n    useEffect(() => {\n        if (hasValidData && props.onDataIsValid) {\n            props.onDataIsValid(props.postType);\n        }\n\n        if (!hasValidData && props.onDataIsInvalid) {\n            props.onDataIsInvalid(props.postType);\n        }\n    }, [hasValidData]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    description={props.text.fieldTaxonomyDescription}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                        maxSuggestions={1000}\n                        expandOnFocus={true}\n                        autoSelectFirstMatch={true}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n\n            {! hasValidData && (\n                <PanelRow>\n                    <BaseControl label={props.text.validationError} className=\"future-action-error\">\n                        <div>\n                            <i className=\"dashicons dashicons-warning\"></i> {validationError}\n                        </div>\n                    </BaseControl>\n                </PanelRow>\n            )}\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n                onDataIsValid={props.onDataIsValid}\n                onDataIsInvalid={props.onDataIsInvalid}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { SelectControl as WPSelectControl } from \"&wp.components\";\n\nexport const SelectControl = function (props) {\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <WPSelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingRow = function (props) {\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\n\nexport const SettingsSection = function (props) {\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            disabled={props.disabled}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment } from \"&wp.element\";\nimport { TextControl as WPTextControl } from \"&wp.components\";\n\nexport const TextControl = function (props) {\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { Button } from '&wp.components';\n\nexport const ToggleArrowButton = function (props) {\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","import { ToggleArrowButton } from \"./ToggleArrowButton\";\nimport { DateTimePicker } from \"./DateTimePicker\";\nimport { Fragment, useEffect } from \"&wp.element\";\n\nexport const ToggleCalendarDatePicker = (\n    {\n        isExpanded,\n        strings,\n        onToggleCalendar,\n        currentDate,\n        onChangeDate,\n        is12Hour,\n        startOfWeek\n    }\n) => {\n    useEffect(() => {\n        // Move the element of the toggle button to between the time and date elements.\n        const toggleButtonElement = document.querySelector('.future-action-calendar-toggle');\n\n        if (! toggleButtonElement) {\n            return;\n        }\n\n        const dateTimeElement = toggleButtonElement.nextElementSibling;\n\n        if (! dateTimeElement) {\n            return;\n        }\n\n        const timeElement = dateTimeElement.querySelector('.components-datetime__time');\n\n        if (! timeElement) {\n            return;\n        }\n\n        const dateElement = timeElement.nextSibling;\n\n        if (! dateElement) {\n            return;\n        }\n\n        dateTimeElement.insertBefore(toggleButtonElement, dateElement)\n    });\n\n    return (\n        <Fragment>\n            <ToggleArrowButton\n                className=\"future-action-calendar-toggle\"\n                isExpanded={isExpanded}\n                iconExpanded=\"arrow-up-alt2\"\n                iconCollapsed=\"calendar\"\n                titleExpanded={strings.hideCalendar}\n                titleCollapsed={strings.showCalendar}\n                onClick={onToggleCalendar} />\n\n            <DateTimePicker\n                currentDate={currentDate}\n                onChange={onChangeDate}\n                __nextRemoveHelpButton={true}\n                is12Hour={is12Hour}\n                startOfWeek={startOfWeek}\n            />\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport { Fragment, useState, useEffect } from \"&wp.element\";\nimport { FormTokenField } from \"&wp.components\";\n\nexport const TokensControl = (props) => {\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={props.maxSuggestions}\n                className=\"publishpres-future-token-field\"\n                __experimentalExpandOnFocus={props.expandOnFocus}\n                __experimentalAutoSelectFirstMatch={props.autoSelectFirstMatch}\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { formatUnixTimeToTimestamp, getCurrentTimeAsTimestamp, normalizeUnixTimeToSeconds } from './time';\nimport { isNumber } from './utils';\nimport { register, createReduxStore } from '&wp.data';\n\nexport const createStore = (props) => {\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n        hasValidData: true,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    // Make sure the date is a number, if it is a string with only numbers\n                    if (typeof action.date !== 'number' && isNumber(action.date)) {\n                        action.date = parseInt(action.date);\n                    }\n\n                    // If string, convert to unix time\n                    if (typeof action.date === 'string') {\n                        action.date = new Date(action.date).getTime();\n                    }\n\n                    // Make sure the time is always in seconds\n                    action.date = normalizeUnixTimeToSeconds(action.date);\n\n                    // Convert to formated string format, considering it is in the site's timezone\n                    action.date = formatUnixTimeToTimestamp(action.date);\n\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n                case 'SET_HAS_VALID_DATA':\n                    return {\n                        ...state,\n                        hasValidData: action.hasValidData,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            },\n            setHasValidData(hasValidData) {\n                return {\n                    type: 'SET_HAS_VALID_DATA',\n                    hasValidData: hasValidData\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            },\n            getHasValidData(state) {\n                return state.hasValidData;\n            },\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToSeconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length <= 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n\nexport const getActionSettingsFromColumnData = (postId) => {\n    const columnData = document.querySelector(`#post-expire-column-${postId}`);\n\n    return {\n        enabled: columnData.dataset.actionEnabled === '1',\n        action: columnData.dataset.actionType,\n        date: columnData.dataset.actionDate,\n        dateUnix: columnData.dataset.actionDateUnix,\n        taxonomy: columnData.dataset.actionTaxonomy,\n        terms: columnData.dataset.actionTerms,\n    };\n}\n\n/**\n * This function is used to determine if a value is a number, including strings.\n *\n * @param {*} value\n * @returns\n */\nexport const isNumber = (value) => {\n    return !isNaN(value);\n}\n","module.exports = ReactDOM;","module.exports = publishpressFutureClassicEditorConfig;","module.exports = wp;","module.exports = wp.components;","module.exports = wp.data;","module.exports = wp.element;","module.exports = wp.hooks;","module.exports = wp.url;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FutureActionPanelClassicEditor } from './components';\nimport { createStore } from './data';\nimport { isGutenbergEnabled } from './utils';\nimport { createRoot } from '&wp.element';\nimport { select } from '&wp.data';\nimport {\n    postType,\n    isNewPost,\n    actionsSelectOptions,\n    is12Hour,\n    timeFormat,\n    startOfWeek,\n    strings,\n    taxonomyName,\n    postTypeDefaultConfig,\n    defaultDate\n} from \"&config.classic-editor\";\nimport { render } from \"&ReactDOM\";\n\nif (! isGutenbergEnabled()) {\n    const storeName = 'publishpress-future/future-action';\n\n    if (!select(storeName)) {\n        createStore({\n            name: storeName,\n            defaultState: {\n                autoEnable: postTypeDefaultConfig.autoEnable,\n                action: postTypeDefaultConfig.expireType,\n                date: defaultDate,\n                taxonomy: postTypeDefaultConfig.taxonomy,\n                terms: postTypeDefaultConfig.terms,\n            }\n        });\n    }\n\n    const container = document.getElementById(\"publishpress-future-classic-editor\");\n    const component = (\n        <FutureActionPanelClassicEditor\n            storeName={storeName}\n            postType={postType}\n            isNewPost={isNewPost}\n            actionsSelectOptions={actionsSelectOptions}\n            is12Hour={is12Hour}\n            timeFormat={timeFormat}\n            startOfWeek={startOfWeek}\n            strings={strings}\n            taxonomyName={taxonomyName}\n        />\n    );\n\n    createRoot(container).render(component);\n}\n"],"names":["ButtonsPanel","props","children","CheckboxControl","checked","setChecked","description","unescapedDescription","__html","onChange","value","label","name","className","DateTimePicker","currentDate","is12Hour","startOfWeek","wp","components","PanelRow","SelectControl","FormTokenField","Spinner","BaseControl","element","Fragment","useEffect","useState","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","hasValidData","getHasValidData","validationError","setValidationError","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","setHasValidData","mapTermsListById","map","term","insertTerm","id","count","link","slug","mapTermsListByName","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","path","then","result","forEach","storeCalendarIsVisibleOnStorage","localStorage","setItem","context","getCalendarIsVisibleFromStorage","getItem","autoEnableAndHideCheckbox","isCleanNewPost","onDataIsValid","onDataIsInvalid","selectedTerms","length","termsListByNameKeys","Object","keys","panelClass","contentPanelClass","datePanelClass","is24hour","timeFormat","replaceCurlyBracketsWithLink","string","href","target","parts","split","push","shift","part","before","after","actionsSelectOptions","filter","item","indexOf","HelpText","strings","timezoneSettingsHelp","displayTaxonomyField","String","includes","termsFieldLabel","newTerms","replace","removeTerms","addTerms","validateData","valid","errorActionRequired","errorDateRequired","isTermRequired","noTermIsSelected","errorTermsRequired","enablePostExpiration","loading","noTaxonomyFound","noTermsFound","addTermsPlaceholder","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","editPostAttribute","newAttribute","publishpress_future_action","entries","store","getEditedPostAttribute","lockPostSaving","unlockPostSaving","panelTitle","postTypeDefaultConfig","autoEnable","postType","FutureActionPanelBulkEdit","join","changeAction","getChangeAction","setChangeAction","termsString","handleStrategyChange","options","noChange","changeAdd","addOnly","changeOnly","removeOnly","optionsToDisplayPanel","jQuery","prop","futureActionUpdate","isNewPost","nonce","FutureActionPanelClassicEditor","browserTimezoneOffset","Date","getTimezoneOffset","getElementByName","document","getElementsByName","getTermsFromElementByName","parseInt","getElementValueByName","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","taxonomyLabel","setTaxonomyLabel","onChangeTaxonomy","onChangeTerms","onChangeHowToExpire","onChangeActive","onChangeExpireOffset","onChangeEmailNotification","onChangeAutoEnabled","taxonomiesList","settingsTermsOptions","option","termOptionsLabels","settingsRows","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","noItemsfound","fieldTaxonomyDescription","expireTypeList","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","postTypeSettings","noItemFoundMessage","selected","SettingRow","SettingsFieldset","SettingsForm","SettingsSection","title","SettingsTable","bodyChildren","SubmitButton","disabled","TextControl","placeholder","ToggleArrowButton","onClick","iconExpanded","iconCollapsed","icon","isExpanded","titleExpanded","titleCollapsed","ToggleCalendarDatePicker","onToggleCalendar","onChangeDate","toggleButtonElement","querySelector","dateTimeElement","nextElementSibling","timeElement","dateElement","nextSibling","insertBefore","hideCalendar","showCalendar","TokensControl","stringValue","setStringValue","maxSuggestions","expandOnFocus","autoSelectFirstMatch","TrueFalseControl","e","trueValue","is","trueLabel","falseValue","falseLabel","createStore","defaultState","reducer","state","type","getTime","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","normalizeUnixTimeToMilliseconds","compact","array","Array","isArray","values","undefined","debugLogFactory","config","message","console","isDebugEnabled","debug","isGutenbergEnabled","body","classList","contains","getFieldByName","postId","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","getActionSettingsFromColumnData","columnData","dataset","actionEnabled","actionType","actionDate","dateUnix","actionDateUnix","actionTaxonomy","actionTerms","isNumber","isNaN","expireType","defaultDate","container","getElementById","component","render"],"sourceRoot":""}