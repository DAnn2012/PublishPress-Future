{"version":3,"file":"quick-edit.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/quick-edit.jsx"],"sourcesContent":["import { normalizeUnixTimeToMilliseconds, formatTimestampToUnixTime } from '../time';\nimport { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListByName[term].id;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    console.log('terms', termsListByNameKeys);\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />``\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {props.strings.loading + ` (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms.split(',').map(term => parseInt(term)) : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FutureActionPanel } from './components/FutureActionPanel';\nimport { createStore } from './data';\nimport { getFieldValueByName, getFieldValueByNameAsArrayOfInt, getFieldValueByNameAsBool } from './utils';\n\n((wp, config, inlineEditPost) => {\n    const storeName = 'publishpress-future/future-action';\n    const delayToUnmountAfterSaving = 1000;\n\n    const QuickEditFutureActionPanel = (props) => {\n        const { useSelect } = wp.data;\n        const { useEffect } = wp.element;\n\n        const onChangeData = (attribute, value) => {};\n\n        const date = useSelect((select) => select(storeName).getDate(), []);\n        const enabled = useSelect((select) => select(storeName).getEnabled(), []);\n        const action = useSelect((select) => select(storeName).getAction(), []);\n        const terms = useSelect((select) => select(storeName).getTerms(), []);\n        const taxonomy = useSelect((select) => select(storeName).getTaxonomy(), []);\n\n        return (\n            <div className={'post-expirator-panel'}>\n                <FutureActionPanel\n                    postType={config.postType}\n                    isCleanNewPost={config.isNewPost}\n                    actionsSelectOptions={config.actionsSelectOptions}\n                    enabled={enabled}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    onChangeData={onChangeData}\n                    is12hours={config.is12hours}\n                    startOfWeek={config.startOfWeek}\n                    storeName={storeName}\n                    strings={config.strings} />\n\n                {/* Quick edit JS code will save only fields with name inside the edit row */}\n                <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n                <input type=\"hidden\" name={'future_action_action'} value={action} />\n                <input type=\"hidden\" name={'future_action_date'} value={date} />\n                <input type=\"hidden\" name={'future_action_terms'} value={terms.join(',')} />\n                <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n                <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n                <input type=\"hidden\" name={'_future_action_nonce'} value={config.nonce} />\n            </div>\n        );\n    };\n\n    // We create a copy of the WP inline edit post function\n    const wpInlineEdit = inlineEditPost.edit;\n    const wpInlineEditRevert = inlineEditPost.revert;\n\n    const getPostId = (id) => {\n        // If id is a string or a number, return it directly\n        if (typeof id === 'string' || typeof id === 'number') {\n            return id;\n        }\n\n        // Otherwise, assume it's an HTML element and extract the post ID\n        const trElement = id.closest('tr');\n        const trId = trElement.id;\n        const postId = trId.split('-')[1];\n\n        return postId;\n    }\n\n    // We override the function with our own code\n    inlineEditPost.edit = function (id) {\n        const { createRoot } = wp.element;\n        const { select } = wp.data;\n\n        const postId = getPostId(id);\n\n        // Call the original WP edit function.\n        wpInlineEdit.apply(this, arguments);\n\n        // Initiate our component.\n        if (!select(storeName)) {\n            const enabled = getFieldValueByNameAsBool('enabled', postId);\n            const action = getFieldValueByName('action', postId);\n            const date = getFieldValueByName('date', postId);\n            const terms = getFieldValueByName('terms', postId);\n            const taxonomy = getFieldValueByName('taxonomy', postId);\n\n            createStore({\n                name: storeName,\n                defaultState: {\n                    autoEnable: enabled,\n                    action: action,\n                    date: date,\n                    taxonomy: taxonomy,\n                    terms: terms,\n                }\n            });\n        }\n\n        const container = document.getElementById(\"publishpress-future-quick-edit\");\n        const root = createRoot(container);\n\n        root.render(<QuickEditFutureActionPanel id={postId} />);\n\n        inlineEditPost.revert = function () {\n            root.unmount();\n\n            // Call the original WP edit function.\n            wpInlineEditRevert.apply(this, arguments);\n        };\n\n         const saveButton = document.querySelector('.inline-edit-save .save');\n         if (saveButton) {\n             saveButton.onclick = function() {\n                 setTimeout(() => {\n                     root.unmount();\n                 }, delayToUnmountAfterSaving);\n             };\n         }\n    };\n})(window.wp, window.publishpressFutureQuickEdit, inlineEditPost);\n"],"names":["wp","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","props","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","mapTermsListByName","id","callOnChangeData","attribute","value","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","postType","path","per_page","then","list","forEach","cat","name","strings","category","response","parseInt","count","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","console","log","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","createStore","register","createReduxStore","defaultState","autoEnable","split","store","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","Date","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","filter","item","undefined","debugLogFactory","config","description","message","isDebugEnabled","debug","isGutenbergEnabled","document","body","classList","contains","getElementByName","getElementsByName","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","inlineEditPost","delayToUnmountAfterSaving","QuickEditFutureActionPanel","isNewPost","join","nonce","wpInlineEdit","edit","wpInlineEditRevert","revert","getPostId","trElement","closest","trId","createRoot","apply","arguments","container","getElementById","root","render","unmount","saveButton","onclick","setTimeout","window","publishpressFutureQuickEdit"],"sourceRoot":""}