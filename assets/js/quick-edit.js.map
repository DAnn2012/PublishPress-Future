{"version":3,"file":"quick-edit.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/QuickEditFutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/quick-edit.jsx"],"sourcesContent":["import { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nconst FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled || false}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {`${props.strings.loading} (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n\nexport default FutureActionPanel;\n","import FutureActionPanel from './FutureActionPanel';\n\nconst QuickEditFutureActionPanel = (props) => {\n    const { useSelect } = wp.data;\n\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n\nexport default QuickEditFutureActionPanel;\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import QuickEditFutureActionPanel from './components/QuickEditFutureActionPanel';\nimport { createStore } from './data';\nimport { getFieldValueByName, getFieldValueByNameAsBool } from './utils';\n\n((wp, config, inlineEditPost) => {\n    const storeName = 'publishpress-future/future-action';\n    const delayToUnmountAfterSaving = 1000;\n\n    // We create a copy of the WP inline edit post function\n    const wpInlineEdit = inlineEditPost.edit;\n    const wpInlineEditRevert = inlineEditPost.revert;\n\n    const getPostId = (id) => {\n        // If id is a string or a number, return it directly\n        if (typeof id === 'string' || typeof id === 'number') {\n            return id;\n        }\n\n        // Otherwise, assume it's an HTML element and extract the post ID\n        const trElement = id.closest('tr');\n        const trId = trElement.id;\n        const postId = trId.split('-')[1];\n\n        return postId;\n    }\n\n    /**\n     * We override the function with our own code so we can detect when\n     * the inline edit row is displayed to recreate the React component.\n     */\n    inlineEditPost.edit = function (id) {\n        const { createRoot } = wp.element;\n        const { select, dispatch } = wp.data;\n\n        // Call the original WP edit function.\n        wpInlineEdit.apply(this, arguments);\n\n        const postId = getPostId(id);\n        const enabled = getFieldValueByNameAsBool('enabled', postId);\n        const action = getFieldValueByName('action', postId);\n        const date = getFieldValueByName('date', postId);\n        const terms = getFieldValueByName('terms', postId);\n        const taxonomy = getFieldValueByName('taxonomy', postId);\n\n        const termsList = terms.split(',');\n        console.log(termsList);\n\n        // if store exists, update the state. Otherwise, create it.\n        if (select(storeName)) {\n            dispatch(storeName).setEnabled(enabled);\n            dispatch(storeName).setAction(action);\n            dispatch(storeName).setDate(date);\n            dispatch(storeName).setTaxonomy(taxonomy);\n            dispatch(storeName).setTerms(termsList);\n        } else {\n            createStore({\n                name: storeName,\n                defaultState: {\n                    autoEnable: enabled,\n                    action: action,\n                    date: date,\n                    taxonomy: taxonomy,\n                    terms: termsList,\n                }\n            });\n        }\n\n        inlineEditPost.revert = function () {\n            root.unmount();\n\n            // Call the original WP edit function.\n            wpInlineEditRevert.apply(this, arguments);\n        };\n\n        const saveButton = document.querySelector('.inline-edit-save .save');\n        if (saveButton) {\n            saveButton.onclick = function() {\n                setTimeout(() => {\n                    root.unmount();\n                }, delayToUnmountAfterSaving);\n            };\n        }\n\n        const container = document.getElementById(\"publishpress-future-quick-edit\");\n        const root = createRoot(container);\n\n        root.render(\n            <QuickEditFutureActionPanel\n                id={postId}\n                storeName={storeName}\n                postType={config.postType}\n                isNewPost={config.isNewPost}\n                actionsSelectOptions={config.actionsSelectOptions}\n                is12hours={config.is12hours}\n                startOfWeek={config.startOfWeek}\n                strings={config.strings}\n                nonce={config.nonce}\n            />\n        );\n    };\n})(window.wp, window.publishpressFutureQuickEdit, inlineEditPost);\n"],"names":["wp","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","props","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","insertTerm","id","count","description","link","name","slug","mapTermsListByName","callOnChangeData","attribute","value","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","postType","path","per_page","then","list","forEach","cat","strings","category","response","parseInt","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","QuickEditFutureActionPanel","termsString","join","isNewPost","nonce","createStore","register","createReduxStore","defaultState","split","autoEnable","store","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","Date","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","filter","item","undefined","debugLogFactory","config","message","console","isDebugEnabled","debug","isGutenbergEnabled","document","body","classList","contains","getElementByName","getElementsByName","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","inlineEditPost","delayToUnmountAfterSaving","wpInlineEdit","edit","wpInlineEditRevert","revert","getPostId","trElement","closest","trId","createRoot","dispatch","apply","arguments","termsList","log","root","unmount","saveButton","onclick","setTimeout","container","getElementById","render","window","publishpressFutureQuickEdit"],"sourceRoot":""}