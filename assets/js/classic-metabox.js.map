{"version":3,"file":"classic-metabox.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/classic-metabox/classic-metabox.jsx"],"sourcesContent":["const { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { useEffect } = React;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch,\n    select\n} = wp.data;\nconst { apiFetch } = wp;\nconst {compact} = './utils';\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select('publishpress-future/future-action').getAction(), []);\n    const date = useSelect((select) => select('publishpress-future/future-action').getDate(), []);\n    const enabled = useSelect((select) => select('publishpress-future/future-action').getEnabled(), []);\n    const terms = useSelect((select) => select('publishpress-future/future-action').getTerms(), []);\n    const taxonomy = useSelect((select) => select('publishpress-future/future-action').getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select('publishpress-future/future-action').getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select('publishpress-future/future-action').getTermsListByName(), []);\n    const termsListById = useSelect((select) => select('publishpress-future/future-action').getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select('publishpress-future/future-action').getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch('publishpress-future/future-action');\n\n    const mapTermsListById = (terms) => {\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const mapTermsListByName = (terms) => {\n        return terms.map((term) => {\n            return termsListByName[term].id;\n        });\n    }\n\n    const callOnChangeData = () => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData({\n                enabled: enabled,\n                action: action,\n                date: date,\n                terms: terms,\n                taxonomy: taxonomy\n            });\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            // setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData();\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData();\n    }\n\n    const handleDateChange = (value) => {\n        const date = new Date(value).getTime() / 1000;\n\n        setDate(date);\n\n        callOnChangeData();\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData();\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate((new Date(props.date)).getTime() / 1000);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date * 1000}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {props.strings.loading + ` (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={Object.keys(termsListByName)}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n","import { getCurrentTime } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? parseInt(props.defaultState.date) : getCurrentTime(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms.split(',').map(term => parseInt(term)) : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore('publishpress-future/future-action', {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTime = () => {\n    return (new Date()).getTime()/1000;\n}\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from '../data';\nimport { FutureActionPanel } from '../FutureActionPanel';\n\n(function (wp, config) {\n    // const {createRoot} = ReactDOM;\n\n    // createStore({\n    //     defaultState: {\n    //         autoEnable: config.postTypeDefaultConfig.autoEnable,\n    //         action: config.postTypeDefaultConfig.expireType,\n    //         date: config.defaultDate,\n    //         taxonomy: config.postTypeDefaultConfig.taxonomy,\n    //         ters: config.postTypeDefaultConfig.terms,\n    //     }\n    // });\n\n    // const ClassicFutureActionPanel = () => {\n    //     return (\n    //         <FutureActionPanel/>\n    //     );\n    // };\n\n    // const container = document.getElementById(\"publishpress-future-classic-metabox\");\n    // const root = createRoot(container);\n\n    // root.render(<ClassicFutureActionPanel />);\n})(window.wp, window.publishpressFutureClassicMetabox);\n"],"names":["wp","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","React","useEffect","addQueryArgs","url","data","useSelect","useDispatch","select","apiFetch","compact","FutureActionPanel","props","action","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","mapTermsListByName","id","callOnChangeData","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","value","handleDateChange","Date","getTime","handleTermsChange","postType","path","per_page","then","list","forEach","cat","name","strings","category","response","parseInt","count","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","createStore","register","createReduxStore","defaultState","autoEnable","split","store","reducer","state","type","actions","selectors","getCurrentTime","config","window","publishpressFutureClassicMetabox"],"sourceRoot":""}