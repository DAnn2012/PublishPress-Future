{"version":3,"file":"classic-metabox.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ClassicEditorFutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/classic-metabox.jsx"],"sourcesContent":["import FutureActionPanel from \"./FutureActionPanel\";\n\nconst ClassicEditorFutureActionPanel = (props) => {\n    const { select } = wp.data;\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const data = {\n        enabled: getElementByName('future_action_enabled').value === '1',\n        action: getElementByName('future_action_action').value,\n        date: getElementByName('future_action_date').value,\n        terms: getElementByName('future_action_terms').value.split(',').map(term => parseInt(term)),\n        taxonomy: getElementByName('future_action_taxonomy').value,\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n\nexport default ClassicEditorFutureActionPanel;\n","import { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nconst FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled || false}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {`${props.strings.loading} (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n\nexport default FutureActionPanel;\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import ClassicEditorFutureActionPanel from './components/ClassicEditorFutureActionPanel';\nimport { createStore } from './data';\nimport { isGutenbergEnabled } from './utils';\n\n((wp, config) => {\n    if (isGutenbergEnabled()) {\n        return;\n    }\n\n    const storeName = 'publishpress-future/future-action';\n\n    const { createRoot } = wp.element;\n    const { select } = wp.data;\n\n    if (!select(storeName)) {\n        createStore({\n            name: storeName,\n            defaultState: {\n                autoEnable: config.postTypeDefaultConfig.autoEnable,\n                action: config.postTypeDefaultConfig.expireType,\n                date: config.defaultDate,\n                taxonomy: config.postTypeDefaultConfig.taxonomy,\n                terms: config.postTypeDefaultConfig.terms,\n            }\n        });\n    }\n\n    const container = document.getElementById(\"publishpress-future-classic-metabox\");\n    const root = createRoot(container);\n\n    root.render(\n        <ClassicEditorFutureActionPanel\n            storeName={storeName}\n            postType={config.postType}\n            isNewPost={config.isNewPost}\n            actionsSelectOptions={config.actionsSelectOptions}\n            is12hours={config.is12hours}\n            startOfWeek={config.startOfWeek}\n            strings={config.strings}\n        />\n    );\n})(window.wp, window.publishpressFutureClassicMetabox);\n"],"names":["ClassicEditorFutureActionPanel","props","select","wp","data","browserTimezoneOffset","Date","getTimezoneOffset","getElementByName","name","document","getElementsByName","onChangeData","attribute","value","store","storeName","getEnabled","getAction","getDate","getTerms","join","getTaxonomy","enabled","action","date","terms","split","map","parseInt","term","taxonomy","postType","isNewPost","actionsSelectOptions","is12hours","startOfWeek","strings","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","useSelect","useDispatch","apiFetch","FutureActionPanel","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","insertTerm","id","count","description","link","slug","mapTermsListByName","callOnChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","path","per_page","then","list","forEach","cat","category","response","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","String","includes","loading","noTaxonomyFound","noTermsFound","createStore","register","createReduxStore","defaultState","autoEnable","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","filter","item","undefined","debugLogFactory","config","message","console","isDebugEnabled","debug","isGutenbergEnabled","body","classList","contains","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","createRoot","postTypeDefaultConfig","expireType","defaultDate","container","getElementById","root","render","window","publishpressFutureClassicMetabox"],"sourceRoot":""}