{"version":3,"file":"block-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/block-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const CheckboxControl = function (props) {\n    const { Fragment, useState } = wp.element;\n    const WPCheckboxControl = wp.components.CheckboxControl;\n\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled || false}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {`${props.strings.loading} (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isCleanNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel } from \"./\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const { select } = wp.data;\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const data = {\n        enabled: getElementByName('future_action_enabled').value === '1',\n        action: getElementByName('future_action_action').value,\n        date: getElementByName('future_action_date').value,\n        terms: getElementByName('future_action_terms').value.split(',').map(term => parseInt(term)),\n        taxonomy: getElementByName('future_action_taxonomy').value,\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const { useSelect } = wp.data;\n\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nexport const NonceControl = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\n\nexport const PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.debug('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SelectControl = function (props) {\n    const { Fragment } = wp.element;\n    const { SelectControl } = wp.components;\n\n\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <SelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TextControl = function (props) {\n    const { Fragment } = wp.element;\n    const { WPTextControl } = wp.components.TextControl;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TokensControl = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from './data';\nimport { FutureActionPanelBlockEditor } from './components';\n\n(function (wp, config) {\n    const { registerPlugin } = wp.plugins;\n    const storeName = 'publishpress-future/future-action';\n\n    createStore({\n        name: storeName,\n        defaultState: {\n            autoEnable: config.postTypeDefaultConfig.autoEnable,\n            action: config.postTypeDefaultConfig.expireType,\n            date: config.defaultDate,\n            taxonomy: config.postTypeDefaultConfig.taxonomy,\n            terms: config.postTypeDefaultConfig.terms,\n        }\n    });\n\n    const BlockEditorFutureActionPlugin = () => {\n        return (\n            <FutureActionPanelBlockEditor\n                postType={wp.data.select('core/editor').getCurrentPostType()}\n                isCleanNewPost={wp.data.select('core/editor').isCleanNewPost()}\n                actionsSelectOptions={config.actionsSelectOptions}\n                is12hours={config.is12hours}\n                startOfWeek={config.startOfWeek}\n                storeName={storeName}\n                strings={config.strings}\n                postTypeDefaultConfig={config.postTypeDefaultConfig} />\n        );\n    }\n\n    registerPlugin('publishpress-future-action', {\n        render: BlockEditorFutureActionPlugin\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["ButtonsPanel","props","children","CheckboxControl","wp","element","Fragment","useState","WPCheckboxControl","components","checked","setChecked","description","unescapedDescription","__html","onChange","value","label","name","className","PanelRow","DateTimePicker","SelectControl","FormTokenField","Spinner","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","insertTerm","id","count","link","slug","mapTermsListByName","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","postType","path","per_page","then","list","forEach","cat","strings","category","response","parseInt","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","editPostAttribute","newAttribute","publishpress_future_action","entries","store","getEditedPostAttribute","panelTitle","postTypeDefaultConfig","autoEnable","FutureActionPanelClassicEditor","browserTimezoneOffset","Date","getTimezoneOffset","getElementByName","document","getElementsByName","join","split","isNewPost","FutureActionPanelQuickEdit","termsString","nonce","NonceControl","referrer","PostTypeSettingsPanel","applyFilters","hooks","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","onChangeTaxonomy","onChangeTerms","onChangeHowToExpire","onChangeActive","onChangeExpireOffset","onChangeEmailNotification","onChangeAutoEnabled","updateTermsOptionsState","options","settingsTermsOptions","option","push","taxonomiesList","taxAttributes","catch","error","console","debug","termOptionsLabels","settingsRows","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","noItemsfound","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","postTypeSettings","noItemFoundMessage","selected","SettingRow","SettingsFieldset","SettingsForm","SettingsSection","title","SettingsTable","bodyChildren","SubmitButton","TextControl","WPTextControl","placeholder","TokensControl","stringValue","setStringValue","TrueFalseControl","e","target","trueValue","jQuery","is","trueLabel","falseValue","falseLabel","createStore","register","createReduxStore","defaultState","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","undefined","debugLogFactory","config","message","isDebugEnabled","isGutenbergEnabled","body","classList","contains","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","registerPlugin","plugins","expireType","defaultDate","BlockEditorFutureActionPlugin","getCurrentPostType","render","window","postExpiratorPanelConfig"],"sourceRoot":""}