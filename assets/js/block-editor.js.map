{"version":3,"file":"block-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/ToggleArrowButton.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/block-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const CheckboxControl = function (props) {\n    const { Fragment, useState } = wp.element;\n    const WPCheckboxControl = wp.components.CheckboxControl;\n\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { compact } from '../utils';\nimport { ToggleArrowButton } from './ToggleArrowButton';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner, BaseControl, Container } = wp.components;\nconst { Fragment, useEffect, useState } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n    const calendarIsVisible = useSelect((select) => select(props.storeName).getCalendarIsVisible(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms,\n        setCalendarIsVisible\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    const storeCalendarIsVisibleOnStorage = (value) => {\n        localStorage.setItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context, value ? '1' : '0');\n    }\n\n    const getCalendarIsVisibleFromStorage = () => {\n        return localStorage.getItem('FUTURE_ACTION_CALENDAR_IS_VISIBLE_' + props.context);\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        if (getCalendarIsVisibleFromStorage() === null) {\n            setCalendarIsVisible(props.calendarIsVisible);\n        } else {\n            setCalendarIsVisible(getCalendarIsVisibleFromStorage() === '1');\n        }\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    useEffect(() => {\n        storeCalendarIsVisibleOnStorage(calendarIsVisible);\n    }, [calendarIsVisible]);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    const panelClass = calendarIsVisible ? 'future-action-panel' : 'future-action-panel hidden-calendar';\n    const contentPanelClass = calendarIsVisible ? 'future-action-panel-content' : 'future-action-panel-content hidden-calendar';\n    const datePanelClass = calendarIsVisible ? 'future-action-date-panel' : 'future-action-date-panel hidden-calendar';\n\n\n    const replaceCurlyBracketsWithLink = (string, href, target) => {\n        const parts = string.split('{');\n        const result = [];\n\n        result.push(parts.shift());\n\n        for (const part of parts) {\n            const [before, after] = part.split('}');\n\n            result.push(\n                <a href={href} target={target} key={href}>{before}</a>\n            );\n\n            result.push(after);\n        }\n\n        return result;\n    };\n\n\n    const HelpText = replaceCurlyBracketsWithLink(props.strings.timezoneSettingsHelp, '/wp-admin/options-general.php#timezone_string', '_blank');\n\n    return (\n        <div className={panelClass}>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={contentPanelClass}>\n                        <SelectControl\n                            label={props.strings.action}\n                            value={action}\n                            options={props.actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n                    </PanelRow>\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <PanelRow>\n                                    <BaseControl label={props.taxonomyName}>\n                                        {`${props.strings.loading} (${props.taxonomyName})`}\n                                        <Spinner />\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                            || (!taxonomy && (\n                                <PanelRow>\n                                    <BaseControl label={props.taxonomyName}>\n                                        <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}\n                                    </BaseControl>\n                                </PanelRow>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <PanelRow>\n                                            <BaseControl label={props.taxonomyName}>\n                                                <i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                    || (\n                                        <PanelRow>\n                                            <BaseControl>\n                                                <FormTokenField\n                                                    label={props.taxonomyName}\n                                                    value={selectedTerms}\n                                                    suggestions={termsListByNameKeys}\n                                                    onChange={handleTermsChange}\n                                                    maxSuggestions={10}\n                                                />\n                                            </BaseControl>\n                                        </PanelRow>\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={datePanelClass}>\n                        <ToggleArrowButton\n                            className=\"future-action-calendar-toggle\"\n                            isExpanded={calendarIsVisible}\n                            iconExpanded=\"arrow-up-alt2\"\n                            iconCollapsed=\"calendar\"\n                            titleExpanded={props.strings.hideCalendar}\n                            titleCollapsed={props.strings.showCalendar}\n                            onClick={() => setCalendarIsVisible(!calendarIsVisible)} />\n\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n\n                    <PanelRow>\n                        <div className=\"future-action-help-text\">\n                            <hr />\n\n                            <span className=\"dashicons dashicons-info\"></span> {HelpText}.\n                        </div>\n                    </PanelRow>\n                </Fragment>\n            )}\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <div id='publishpress-future-block-editor'>\n                <FutureActionPanel\n                    context={'block-editor'}\n                    postType={props.postType}\n                    isCleanNewPost={props.isCleanNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={data.enabled}\n                    calendarIsVisible={true}\n                    action={data.action}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12hours={props.is12hours}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            </div>\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    context={'bulk-edit'}\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={true}\n                    calendarIsVisible={false}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    taxonomyName={props.taxonomyName}\n                    onChangeData={onChangeData}\n                    is12hours={props.is12hours}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const { select } = wp.data;\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const data = {\n        enabled: getElementByName('future_action_enabled').value === '1',\n        action: getElementByName('future_action_action').value,\n        date: getElementByName('future_action_date').value,\n        terms: getElementByName('future_action_terms').value.split(',').map(term => parseInt(term)),\n        taxonomy: getElementByName('future_action_taxonomy').value,\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'classic-editor'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                calendarIsVisible={true}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const { useSelect } = wp.data;\n\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                context={'quick-edit'}\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                calendarIsVisible={false}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                taxonomyName={props.taxonomyName}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nexport const NonceControl = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\n\nexport const PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.debug('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SelectControl = function (props) {\n    const { Fragment } = wp.element;\n    const { SelectControl } = wp.components;\n\n\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <SelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TextControl = function (props) {\n    const { Fragment } = wp.element;\n    const WPTextControl = wp.components.TextControl;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","export const ToggleArrowButton = function (props) {\n    const { Button } = wp.components;\n\n    const onClick = function () {\n        if (props.onClick) {\n            props.onClick();\n        }\n    };\n\n    const iconExpanded = props.iconExpanded ? props.iconExpanded : 'arrow-up-alt2';\n    const iconCollapsed = props.iconCollapsed ? props.iconCollapsed : 'arrow-down-alt2';\n\n    const icon = props.isExpanded ? iconExpanded : iconCollapsed;\n\n    const title = props.isExpanded ? props.titleExpanded : props.titleCollapsed;\n\n    return (\n        <Button\n            isSmall\n            title={title}\n            icon={icon}\n            onClick={onClick}\n            className={props.className}\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TokensControl = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n        calendarIsVisible: true,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n                case 'SET_CALENDAR_IS_VISIBLE':\n                    return {\n                        ...state,\n                        calendarIsVisible: action.calendarIsVisible,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            },\n            setCalendarIsVisible(calendarIsVisible) {\n                return {\n                    type: 'SET_CALENDAR_IS_VISIBLE',\n                    calendarIsVisible: calendarIsVisible\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            },\n            getCalendarIsVisible(state) {\n                return state.calendarIsVisible;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from './data';\nimport { FutureActionPanelBlockEditor } from './components';\n\n(function (wp, config) {\n    const { registerPlugin } = wp.plugins;\n    const storeName = 'publishpress-future/future-action';\n\n    createStore({\n        name: storeName,\n        defaultState: {\n            autoEnable: config.postTypeDefaultConfig.autoEnable,\n            action: config.postTypeDefaultConfig.expireType,\n            date: config.defaultDate,\n            taxonomy: config.postTypeDefaultConfig.taxonomy,\n            terms: config.postTypeDefaultConfig.terms,\n        }\n    });\n\n    const BlockEditorFutureActionPlugin = () => {\n        return (\n            <FutureActionPanelBlockEditor\n                postType={wp.data.select('core/editor').getCurrentPostType()}\n                isCleanNewPost={wp.data.select('core/editor').isCleanNewPost()}\n                actionsSelectOptions={config.actionsSelectOptions}\n                is12hours={config.is12hours}\n                startOfWeek={config.startOfWeek}\n                storeName={storeName}\n                strings={config.strings}\n                taxonomyName={config.taxonomyName}\n                postTypeDefaultConfig={config.postTypeDefaultConfig} />\n        );\n    }\n\n    registerPlugin('publishpress-future-action', {\n        render: BlockEditorFutureActionPlugin\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["ButtonsPanel","props","children","CheckboxControl","wp","element","Fragment","useState","WPCheckboxControl","components","checked","setChecked","description","unescapedDescription","__html","onChange","value","label","name","className","PanelRow","DateTimePicker","SelectControl","FormTokenField","Spinner","BaseControl","Container","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","calendarIsVisible","getCalendarIsVisible","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","setCalendarIsVisible","mapTermsListById","map","term","insertTerm","id","count","link","slug","mapTermsListByName","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","postType","path","per_page","then","list","forEach","cat","strings","category","response","parseInt","context","taxonomyAttributes","rest_base","storeCalendarIsVisibleOnStorage","localStorage","setItem","getCalendarIsVisibleFromStorage","getItem","autoEnableAndHideCheckbox","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","panelClass","contentPanelClass","datePanelClass","replaceCurlyBracketsWithLink","string","href","target","parts","split","result","push","shift","part","before","after","HelpText","timezoneSettingsHelp","enablePostExpiration","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","hideCalendar","showCalendar","is12hours","startOfWeek","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","editPostAttribute","newAttribute","publishpress_future_action","entries","store","getEditedPostAttribute","panelTitle","postTypeDefaultConfig","autoEnable","FutureActionPanelBulkEdit","join","changeAction","getChangeAction","setChangeAction","termsString","handleStrategyChange","options","noChange","changeAdd","addOnly","changeOnly","removeOnly","optionsToDisplayPanel","futureActionUpdate","isNewPost","nonce","FutureActionPanelClassicEditor","browserTimezoneOffset","Date","getTimezoneOffset","getElementByName","document","getElementsByName","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","applyFilters","hooks","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","onChangeTaxonomy","onChangeTerms","onChangeHowToExpire","onChangeActive","onChangeExpireOffset","onChangeEmailNotification","onChangeAutoEnabled","updateTermsOptionsState","settingsTermsOptions","option","taxonomiesList","taxAttributes","catch","error","console","debug","termOptionsLabels","settingsRows","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","noItemsfound","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","postTypeSettings","noItemFoundMessage","selected","SettingRow","SettingsFieldset","SettingsForm","SettingsSection","title","SettingsTable","bodyChildren","SubmitButton","TextControl","WPTextControl","placeholder","ToggleArrowButton","Button","onClick","iconExpanded","iconCollapsed","icon","isExpanded","titleExpanded","titleCollapsed","TokensControl","stringValue","setStringValue","TrueFalseControl","e","trueValue","jQuery","is","trueLabel","falseValue","falseLabel","createStore","register","createReduxStore","defaultState","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","undefined","debugLogFactory","config","message","isDebugEnabled","isGutenbergEnabled","body","classList","contains","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","registerPlugin","plugins","expireType","defaultDate","BlockEditorFutureActionPlugin","getCurrentPostType","render","window","postExpiratorPanelConfig"],"sourceRoot":""}