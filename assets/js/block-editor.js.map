{"version":3,"file":"block-editor.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBlockEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelBulkEdit.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelClassicEditor.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanelQuickEdit.jsx","webpack://post-expirator/./assets/jsx/components/NonceControl.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SelectControl.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/TextControl.jsx","webpack://post-expirator/./assets/jsx/components/TokensControl.jsx","webpack://post-expirator/./assets/jsx/components/TrueFalseControl.jsx","webpack://post-expirator/./assets/jsx/components/index.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/block-editor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const CheckboxControl = function (props) {\n    const { Fragment, useState } = wp.element;\n    const WPCheckboxControl = wp.components.CheckboxControl;\n\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","import { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        if (props.autoEnableAndHideCheckbox)  {\n            setEnabled(true);\n        } else {\n            setEnabled(props.enabled);\n        }\n\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the props because the value from the store is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                // Force populate the default values\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            {props.autoEnableAndHideCheckbox && (\n                <input type=\"hidden\" name={'future_action_enabled'} value={1} />\n            )}\n\n            {! props.autoEnableAndHideCheckbox && (\n                <PanelRow>\n                    <CheckboxControl\n                        label={props.strings.enablePostExpiration}\n                        checked={enabled || false}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n            )}\n            {enabled && (\n                <Fragment>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {`${props.strings.loading} (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelBlockEditor = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isCleanNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </PluginDocumentSettingPanel>\n    );\n};\n","import { FutureActionPanel, SelectControl } from '.';\nimport { getElementByName } from '../utils';\n\nexport const FutureActionPanelBulkEdit = (props) => {\n    const { useSelect, useDispatch, select } = wp.data;\n\n    const onChangeData = (attribute, value) => {\n        getElementByName('future_action_bulk_enabled').value = select(props.storeName).getEnabled() ? 1 : 0;\n        getElementByName('future_action_bulk_action').value = select(props.storeName).getAction();\n        getElementByName('future_action_bulk_date').value = select(props.storeName).getDate();\n        getElementByName('future_action_bulk_terms').value = select(props.storeName).getTerms().join(',');\n        getElementByName('future_action_bulk_taxonomy').value = select(props.storeName).getTaxonomy();\n    }\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const changeAction = useSelect((select) => select(props.storeName).getChangeAction(), []);\n\n    const {\n        setChangeAction\n    } = useDispatch(props.storeName);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    const handleStrategyChange = (value) => {\n        setChangeAction(value);\n    };\n\n    const options = [\n        { value: 'no-change', label: props.strings.noChange },\n        { value: 'change-add', label: props.strings.changeAdd },\n        { value: 'add-only', label: props.strings.addOnly },\n        { value: 'change-only', label: props.strings.changeOnly },\n        { value: 'remove-only', label: props.strings.removeOnly },\n    ];\n\n    const optionsToDisplayPanel = ['change-add', 'add-only', 'change-only'];\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <SelectControl\n                label={props.strings.futureActionUpdate}\n                name={'future_action_bulk_change_action'}\n                value={changeAction}\n                options={options}\n                onChange={handleStrategyChange}\n            />\n\n            {optionsToDisplayPanel.includes(changeAction) && (\n                <FutureActionPanel\n                    autoEnableAndHideCheckbox={true}\n                    postType={props.postType}\n                    isCleanNewPost={props.isNewPost}\n                    actionsSelectOptions={props.actionsSelectOptions}\n                    enabled={true}\n                    action={action}\n                    date={date}\n                    terms={terms}\n                    taxonomy={taxonomy}\n                    onChangeData={onChangeData}\n                    is12hours={props.is12hours}\n                    startOfWeek={props.startOfWeek}\n                    storeName={props.storeName}\n                    strings={props.strings} />\n            )}\n\n            {/* Bulk edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_bulk_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_bulk_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_bulk_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_bulk_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_bulk_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_bulk_view'} value=\"bulk-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from \"./\";\n\nexport const FutureActionPanelClassicEditor = (props) => {\n    const { select } = wp.data;\n    const browserTimezoneOffset = new Date().getTimezoneOffset();\n\n    const getElementByName = (name) => {\n        return document.getElementsByName(name)[0];\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        getElementByName('future_action_enabled').value = store.getEnabled() ? 1 : 0;\n        getElementByName('future_action_action').value = store.getAction();\n        getElementByName('future_action_date').value = store.getDate();\n        getElementByName('future_action_terms').value = store.getTerms().join(',');\n        getElementByName('future_action_taxonomy').value = store.getTaxonomy();\n    }\n\n    const data = {\n        enabled: getElementByName('future_action_enabled').value === '1',\n        action: getElementByName('future_action_action').value,\n        date: getElementByName('future_action_date').value,\n        terms: getElementByName('future_action_terms').value.split(',').map(term => parseInt(term)),\n        taxonomy: getElementByName('future_action_taxonomy').value,\n    };\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </div>\n    );\n};\n","import { FutureActionPanel } from './';\n\nexport const FutureActionPanelQuickEdit = (props) => {\n    const { useSelect } = wp.data;\n\n    const onChangeData = (attribute, value) => {};\n\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n\n    let termsString = terms;\n    if (typeof terms === 'object') {\n        termsString = terms.join(',');\n    }\n\n    return (\n        <div className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={enabled}\n                action={action}\n                date={date}\n                terms={terms}\n                taxonomy={taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n\n            {/* Quick edit JS code will save only fields with name inside the edit row */}\n            <input type=\"hidden\" name={'future_action_enabled'} value={enabled ? 1 : 0} />\n            <input type=\"hidden\" name={'future_action_action'} value={action} />\n            <input type=\"hidden\" name={'future_action_date'} value={date} />\n            <input type=\"hidden\" name={'future_action_terms'} value={termsString} />\n            <input type=\"hidden\" name={'future_action_taxonomy'} value={taxonomy} />\n            <input type=\"hidden\" name={'future_action_view'} value=\"quick-edit\" />\n            <input type=\"hidden\" name={'_future_action_nonce'} value={props.nonce} />\n        </div>\n    );\n};\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nexport const NonceControl = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport {\n    SettingRow,\n    SettingsFieldset,\n    SettingsTable,\n    SelectControl,\n    TextControl,\n    TokensControl,\n    CheckboxControl\n} from './';\n\nexport const PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.debug('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectControl>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectControl\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensControl\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextControl\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextControl\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport { PostTypeSettingsPanel } from \"./\";\n\nexport const PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SelectControl = function (props) {\n    const { Fragment } = wp.element;\n    const { SelectControl } = wp.components;\n\n\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <SelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TextControl = function (props) {\n    const { Fragment } = wp.element;\n    const WPTextControl = wp.components.TextControl;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPTextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TokensControl = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nexport const TrueFalseControl = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n","export { ButtonsPanel } from \"./ButtonsPanel\";\nexport { FutureActionPanel } from \"./FutureActionPanel\";\nexport { FutureActionPanelBlockEditor } from \"./FutureActionPanelBlockEditor\";\nexport { FutureActionPanelClassicEditor } from \"./FutureActionPanelClassicEditor\";\nexport { FutureActionPanelQuickEdit } from \"./FutureActionPanelQuickEdit\";\nexport { FutureActionPanelBulkEdit } from \"./FutureActionPanelBulkEdit\";\nexport { PostTypeSettingsPanel } from \"./PostTypeSettingsPanel\";\nexport { PostTypesSettingsPanels } from \"./PostTypesSettingsPanels\";\nexport { SettingRow } from \"./SettingRow\";\nexport { SettingsFieldset } from \"./SettingsFieldset\";\nexport { SettingsForm } from \"./SettingsForm\";\nexport { SettingsSection } from \"./SettingsSection\";\nexport { SettingsTable } from \"./SettingsTable\";\nexport { SubmitButton } from \"./SubmitButton\";\nexport { CheckboxControl } from \"./CheckboxControl\";\nexport { SelectControl } from \"./SelectControl\";\nexport { TextControl } from \"./TextControl\";\nexport { TokensControl } from \"./TokensControl\";\nexport { NonceControl } from \"./NonceControl\";\nexport { TrueFalseControl } from \"./TrueFalseControl\";\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n        changeAction: 'no-change',\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n                case 'SET_CHANGE_ACTION':\n                    return {\n                        ...state,\n                        changeAction: action.changeAction,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            },\n            setChangeAction(changeAction) {\n                return {\n                    type: 'SET_CHANGE_ACTION',\n                    changeAction: changeAction\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            },\n            getChangeAction(state) {\n                return state.changeAction;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from './data';\nimport { FutureActionPanelBlockEditor } from './components';\n\n(function (wp, config) {\n    const { registerPlugin } = wp.plugins;\n    const storeName = 'publishpress-future/future-action';\n\n    createStore({\n        name: storeName,\n        defaultState: {\n            autoEnable: config.postTypeDefaultConfig.autoEnable,\n            action: config.postTypeDefaultConfig.expireType,\n            date: config.defaultDate,\n            taxonomy: config.postTypeDefaultConfig.taxonomy,\n            terms: config.postTypeDefaultConfig.terms,\n        }\n    });\n\n    const BlockEditorFutureActionPlugin = () => {\n        return (\n            <FutureActionPanelBlockEditor\n                postType={wp.data.select('core/editor').getCurrentPostType()}\n                isCleanNewPost={wp.data.select('core/editor').isCleanNewPost()}\n                actionsSelectOptions={config.actionsSelectOptions}\n                is12hours={config.is12hours}\n                startOfWeek={config.startOfWeek}\n                storeName={storeName}\n                strings={config.strings}\n                postTypeDefaultConfig={config.postTypeDefaultConfig} />\n        );\n    }\n\n    registerPlugin('publishpress-future-action', {\n        render: BlockEditorFutureActionPlugin\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["ButtonsPanel","props","children","CheckboxControl","wp","element","Fragment","useState","WPCheckboxControl","components","checked","setChecked","description","unescapedDescription","__html","onChange","value","label","name","className","PanelRow","DateTimePicker","SelectControl","FormTokenField","Spinner","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","action","select","storeName","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","insertTerm","id","count","link","slug","mapTermsListByName","callOnChangeData","attribute","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","postType","path","per_page","then","list","forEach","cat","strings","category","response","parseInt","context","taxonomyAttributes","rest_base","autoEnableAndHideCheckbox","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","is12hours","startOfWeek","FutureActionPanelBlockEditor","PluginDocumentSettingPanel","editPost","editPostAttribute","newAttribute","publishpress_future_action","entries","store","getEditedPostAttribute","panelTitle","postTypeDefaultConfig","autoEnable","FutureActionPanelBulkEdit","join","changeAction","getChangeAction","setChangeAction","termsString","handleStrategyChange","options","noChange","changeAdd","addOnly","changeOnly","removeOnly","optionsToDisplayPanel","futureActionUpdate","isNewPost","nonce","FutureActionPanelClassicEditor","browserTimezoneOffset","Date","getTimezoneOffset","getElementByName","document","getElementsByName","split","FutureActionPanelQuickEdit","NonceControl","referrer","PostTypeSettingsPanel","applyFilters","hooks","settings","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","onChangeTaxonomy","onChangeTerms","onChangeHowToExpire","onChangeActive","onChangeExpireOffset","onChangeEmailNotification","onChangeAutoEnabled","updateTermsOptionsState","settingsTermsOptions","option","push","taxonomiesList","taxAttributes","catch","error","console","debug","termOptionsLabels","settingsRows","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","noItemsfound","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","postTypeSettings","noItemFoundMessage","selected","SettingRow","SettingsFieldset","SettingsForm","SettingsSection","title","SettingsTable","bodyChildren","SubmitButton","TextControl","WPTextControl","placeholder","TokensControl","stringValue","setStringValue","TrueFalseControl","e","target","trueValue","jQuery","is","trueLabel","falseValue","falseLabel","createStore","register","createReduxStore","defaultState","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","undefined","debugLogFactory","config","message","isDebugEnabled","isGutenbergEnabled","body","classList","contains","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","registerPlugin","plugins","expireType","defaultDate","BlockEditorFutureActionPlugin","getCurrentPostType","render","window","postExpiratorPanelConfig"],"sourceRoot":""}