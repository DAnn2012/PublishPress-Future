{"version":3,"file":"settings-post-types.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/fields/CheckboxControl.jsx","webpack://post-expirator/./assets/jsx/components/fields/NonceField.jsx","webpack://post-expirator/./assets/jsx/components/fields/SelectField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TextField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TokensField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TrueFalseField.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/settings-post-types.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nexport default ButtonsPanel;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport TrueFalseField from \"./fields/TrueFalseField\";\nimport SettingRow from \"./SettingRow\";\nimport SettingsFieldset from \"./SettingsFieldset\";\nimport SettingsTable from \"./SettingsTable\";\nimport SelectField from \"./fields/SelectField\";\nimport TextField from \"./fields/TextField\";\nimport TokensField from \"./fields/TokensField\";\nimport CheckboxControl from \"./fields/CheckboxControl\";\n\nconst PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [isActive, setIsActive] = useState(props.settings.active);\n    const [expireOffset, setExpireOffset] = useState(props.settings.defaultExpireOffset);\n    const [emailNotification, setEmailNotification] = useState(props.settings.emailNotification);\n    const [isAutoEnabled, setIsAutoEnabled] = useState(props.settings.autoEnabled);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setIsActive(value);\n    }\n\n    const onChangeExpireOffset = (value) => {\n        setExpireOffset(value);\n    }\n\n    const onChangeEmailNotification = (value) => {\n        setEmailNotification(value);\n    }\n\n    const onChangeAutoEnabled = (value) => {\n        setIsAutoEnabled(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.debug('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <CheckboxControl\n                name={'expirationdate_activemeta-' + props.postType}\n                checked={isActive || false}\n                label={props.text.fieldActiveLabel}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (isActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <CheckboxControl\n                    name={'expirationdate_autoenable-' + props.postType}\n                    checked={isAutoEnabled || false}\n                    label={props.text.fieldAutoEnableLabel}\n                    onChange={onChangeAutoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectField\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectField>\n            </SettingRow>\n        );\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectField\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={settingHowToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensField\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextField\n                    name={'expired-custom-date-' + props.postType}\n                    value={expireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                    onChange={onChangeExpireOffset}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextField\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                    onChange={onChangeEmailNotification}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, isActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n\nexport default PostTypeSettingsPanel;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport PostTypeSettingsPanel from \"./PostTypeSettingsPanel\";\n\nconst PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n\nexport default PostTypesSettingsPanels;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport TrueFalseField from \"./fields/TrueFalseField\";\n\nconst SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n\nexport default SettingRow;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n\nexport default SettingsFieldset;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n\nexport default SettingsForm;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n\nexport default SettingsSection;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n\nexport default SettingsTable;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n\nexport default SubmitButton;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst CheckboxControl = function (props) {\n    const { Fragment, useState } = wp.element;\n    const WPCheckboxControl = wp.components.CheckboxControl;\n\n    const [checked, setChecked] = useState(props.checked || false);\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        setChecked(value);\n\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <WPCheckboxControl\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                checked={checked || false}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n\nexport default CheckboxControl;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nconst NonceField = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n\nexport default NonceField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SelectField = function (props) {\n    const { Fragment } = wp.element;\n    const { SelectControl } = wp.components;\n\n\n    const onChange = (value) => {\n        props.onChange(value);\n    };\n\n    return (\n        <Fragment>\n            {props.options.length === 0 && (\n                <div>{props.noItemFoundMessage}</div>\n            )}\n\n            {props.options.length > 0 && (\n                <SelectControl\n                    label={props.label}\n                    name={props.name}\n                    id={props.name}\n                    className={props.className}\n                    value={props.selected}\n                    onChange={onChange}\n                    data-data={props.data}\n                    options={props.options}\n                />\n            )}\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n\nexport default SelectField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TextField = function (props) {\n    const { Fragment } = wp.element;\n    const { TextControl } = wp.components;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{ __html: props.description }}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const onChange = function (value) {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n    };\n\n    return (\n        <Fragment>\n            <TextControl\n                type=\"text\"\n                label={props.label}\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={props.value}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n\nexport default TextField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TokensField = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n\nexport default TokensField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TrueFalseField = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n\nexport default TrueFalseField;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport SettingsSection from \"./components/SettingsSection\";\nimport SettingsForm from \"./components/SettingsForm\";\nimport PostTypesSettingsPanels from \"./components/PostTypesSettingsPanels\";\nimport SubmitButton from \"./components/SubmitButton\";\nimport ButtonsPanel from \"./components/ButtonsPanel\";\nimport NonceField from \"./components/fields/NonceField\";\n\n(function (wp, config) {\n    const { StrictMode, createRoot } = wp.element;\n\n    const SettingsFormPanel = (props) => {\n        return (\n            <StrictMode>\n                <SettingsForm>\n                    <NonceField\n                        name=\"_postExpiratorMenuDefaults_nonce\"\n                        nonce={config.nonce}\n                        referrer={config.referrer}\n                    />\n                    <SettingsSection\n                        title={config.text.settingsSectionTitle}\n                        description={config.text.settingsSectionDescription}>\n                        <PostTypesSettingsPanels\n                            settings={config.settings}\n                            text={config.text}\n                            expireTypeList={config.expireTypeList}\n                            taxonomiesList={config.taxonomiesList}\n                        />\n                    </SettingsSection>\n\n                    <ButtonsPanel>\n                        <SubmitButton\n                            name=\"expirationdateSaveDefaults\"\n                            text={config.text.saveChanges}\n                        />\n                    </ButtonsPanel>\n                </SettingsForm>\n            </StrictMode>\n        )\n    };\n\n    const container = document.getElementById(\"publishpress-future-settings-post-types\");\n    const root = createRoot(container);\n\n    root.render(<SettingsFormPanel />);\n})(window.wp, window.publishpressFutureConfig);\n"],"names":["ButtonsPanel","props","children","PostTypeSettingsPanel","wp","element","useState","useEffect","addQueryArgs","url","applyFilters","hooks","apiFetch","settings","taxonomy","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","selectedTerms","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","isActive","setIsActive","defaultExpireOffset","expireOffset","setExpireOffset","emailNotification","setEmailNotification","autoEnabled","isAutoEnabled","setIsAutoEnabled","onChangeTaxonomy","value","onChangeTerms","onChangeHowToExpire","onChangeActive","onChangeExpireOffset","onChangeEmailNotification","onChangeAutoEnabled","updateTermsOptionsState","list","options","settingsTermsOptions","option","forEach","term","id","label","name","push","terms","includes","postType","path","per_page","then","taxonomiesList","taxAttributes","rest_base","catch","error","console","debug","termOptionsLabels","map","settingsRows","text","fieldActive","fieldActiveLabel","fieldAutoEnable","fieldAutoEnableLabel","fieldTaxonomy","noItemsfound","length","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","Object","entries","postTypeSettings","SettingRow","Fragment","SettingsFieldset","SettingsForm","SettingsSection","title","description","SettingsTable","bodyChildren","SubmitButton","CheckboxControl","WPCheckboxControl","components","checked","setChecked","unescapedDescription","__html","onChange","className","NonceField","referrer","nonce","SelectField","SelectControl","noItemFoundMessage","selected","data","TextField","TextControl","placeholder","TokensField","FormTokenField","stringValue","setStringValue","join","TrueFalseField","e","target","trueValue","jQuery","is","trueLabel","falseValue","falseLabel","config","StrictMode","createRoot","SettingsFormPanel","settingsSectionTitle","settingsSectionDescription","saveChanges","container","document","getElementById","root","render","window","publishpressFutureConfig"],"sourceRoot":""}