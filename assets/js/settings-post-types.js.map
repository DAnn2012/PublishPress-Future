{"version":3,"file":"settings-post-types.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/ButtonsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypeSettingsPanel.jsx","webpack://post-expirator/./assets/jsx/components/PostTypesSettingsPanels.jsx","webpack://post-expirator/./assets/jsx/components/SettingRow.jsx","webpack://post-expirator/./assets/jsx/components/SettingsFieldset.jsx","webpack://post-expirator/./assets/jsx/components/SettingsForm.jsx","webpack://post-expirator/./assets/jsx/components/SettingsSection.jsx","webpack://post-expirator/./assets/jsx/components/SettingsTable.jsx","webpack://post-expirator/./assets/jsx/components/SubmitButton.jsx","webpack://post-expirator/./assets/jsx/components/fields/NonceField.jsx","webpack://post-expirator/./assets/jsx/components/fields/SelectField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TextField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TokensField.jsx","webpack://post-expirator/./assets/jsx/components/fields/TrueFalseField.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/settings-post-types.jsx"],"sourcesContent":["/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst ButtonsPanel = function (props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nexport default ButtonsPanel;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport TrueFalseField from \"./fields/TrueFalseField\";\nimport SettingRow from \"./SettingRow\";\nimport SettingsFieldset from \"./SettingsFieldset\";\nimport SettingsTable from \"./SettingsTable\";\nimport SelectField from \"./fields/SelectField\";\nimport TextField from \"./fields/TextField\";\nimport TokensField from \"./fields/TokensField\";\n\nconst PostTypeSettingsPanel = function (props) {\n    const { useState, useEffect } = wp.element;\n    const { addQueryArgs } = wp.url;\n    const { applyFilters } = wp.hooks;\n    const { apiFetch } = wp;\n\n    const [postTypeTaxonomy, setPostTypeTaxonomy] = useState(props.settings.taxonomy);\n    const [termOptions, setTermOptions] = useState([]);\n    const [termsSelectIsLoading, setTermsSelectIsLoading] = useState(false);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n    const [settingHowToExpire, setSettingHowToExpire] = useState(props.settings.howToExpire);\n    const [settingActive, setSettingActive] = useState(props.settings.active);\n\n    const onChangeTaxonomy = function (value) {\n        setPostTypeTaxonomy(value);\n    };\n\n    const onChangeTerms = (value) => {\n        setSelectedTerms(value);\n    };\n\n    const onChangeHowToExpire = (value) => {\n        setSettingHowToExpire(value);\n    }\n\n    const onChangeActive = (value) => {\n        setSettingActive(value);\n    }\n\n    useEffect(() => {\n        const updateTermsOptionsState = (list) => {\n            let options = [];\n\n            let settingsTermsOptions = null;\n            let option;\n            list.forEach(term => {\n                option = { value: term.id, label: term.name };\n                options.push(option);\n\n                if (postTypeTaxonomy === props.settings.taxonomy && props.settings.terms.includes(term.id)) {\n                    if (settingsTermsOptions === null) {\n                        settingsTermsOptions = [];\n                    }\n\n                    settingsTermsOptions.push(option.label);\n                }\n            });\n\n            setTermOptions(options);\n            setTermsSelectIsLoading(false);\n            setSelectedTerms(settingsTermsOptions);\n        };\n\n        console.log('options', termOptions);\n\n        if ((!postTypeTaxonomy && props.postType === 'post') || postTypeTaxonomy === 'category') {\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/categories`, { per_page: -1 }),\n            }).then(updateTermsOptionsState);\n        } else {\n            if (!postTypeTaxonomy || !props.taxonomiesList) {\n                return;\n            }\n\n            setTermsSelectIsLoading(true);\n            apiFetch({\n                path: addQueryArgs(`wp/v2/taxonomies/${postTypeTaxonomy}`),\n            }).then((taxAttributes) => {\n                // fetch all terms\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`),\n                }).then(updateTermsOptionsState);\n            }).catch((error) => {\n                console.log('Taxonomy terms error', error);\n                setTermsSelectIsLoading(false);\n            });\n        }\n    }, [postTypeTaxonomy]);\n\n    const termOptionsLabels = termOptions.map((term) => term.label);\n    console.log('postType', props.postType);\n    console.log('termOptionsLabels', termOptionsLabels);\n    console.log('selectedTerms', selectedTerms);\n\n    let settingsRows = [\n        <SettingRow label={props.text.fieldActive} key={'expirationdate_activemeta-' + props.postType}>\n            <TrueFalseField\n                name={'expirationdate_activemeta-' + props.postType}\n                trueLabel={props.text.fieldActiveTrue}\n                trueValue={'active'}\n                falseLabel={props.text.fieldActiveFalse}\n                falseValue={'inactive'}\n                description={props.text.fieldActiveDescription}\n                selected={props.settings.active}\n                onChange={onChangeActive}\n            />\n        </SettingRow>\n    ];\n\n    if (settingActive) {\n        settingsRows.push(\n            <SettingRow label={props.text.fieldAutoEnable} key={'expirationdate_autoenable-' + props.postType}>\n                <TrueFalseField\n                    name={'expirationdate_autoenable-' + props.postType}\n                    trueLabel={props.text.fieldAutoEnableTrue}\n                    trueValue={'1'}\n                    falseLabel={props.text.fieldAutoEnableFalse}\n                    falseValue={'0'}\n                    description={props.text.fieldAutoEnableDescription}\n                    selected={props.settings.autoEnabled}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldTaxonomy} key={'expirationdate_taxonomy-' + props.postType}>\n                <SelectField\n                    name={'expirationdate_taxonomy-' + props.postType}\n                    options={props.taxonomiesList}\n                    selected={postTypeTaxonomy}\n                    noItemFoundMessage={props.text.noItemsfound}\n                    data={props.postType}\n                    onChange={onChangeTaxonomy}\n                >\n                </SelectField>\n            </SettingRow>\n        );\n\n        console.log('settingHowToExpire', settingHowToExpire);\n        console.log('props.taxonomiesList', props.taxonomiesList);\n\n        // Remove items from expireTypeList if related to taxonomies and there is no taxonmoy for the post type\n        if (props.taxonomiesList.length === 0) {\n            props.expireTypeList[props.postType] = props.expireTypeList[props.postType].filter((item) => {\n                return ['category', 'category-add', 'category-remove'].indexOf(item.value) === -1;\n            });\n        }\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldHowToExpire} key={'expirationdate_expiretype-' + props.postType}>\n                <SelectField\n                    name={'expirationdate_expiretype-' + props.postType}\n                    className={'pe-howtoexpire'}\n                    options={props.expireTypeList[props.postType]}\n                    description={props.text.fieldHowToExpireDescription}\n                    selected={props.settings.howToExpire}\n                    onChange={onChangeHowToExpire}\n                />\n\n                {(props.taxonomiesList.length > 0 && (['category', 'category-add', 'category-remove'].indexOf(settingHowToExpire) > -1)) &&\n                    <TokensField\n                        label={props.text.fieldTerm}\n                        name={'expirationdate_terms-' + props.postType}\n                        options={termOptionsLabels}\n                        value={selectedTerms}\n                        isLoading={termsSelectIsLoading}\n                        onChange={onChangeTerms}\n                        description={props.text.fieldTermDescription}\n                    />\n                }\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldDefaultDateTimeOffset} key={'expired-custom-date-' + props.postType}>\n                <TextField\n                    name={'expired-custom-date-' + props.postType}\n                    value={props.settings.defaultExpireOffset}\n                    placeholder={props.settings.globalDefaultExpireOffset}\n                    description={props.text.fieldDefaultDateTimeOffsetDescription}\n                    unescapedDescription={true}\n                />\n            </SettingRow>\n        );\n\n        settingsRows.push(\n            <SettingRow label={props.text.fieldWhoToNotify} key={'expirationdate_emailnotification-' + props.postType}>\n                <TextField\n                    name={'expirationdate_emailnotification-' + props.postType}\n                    className=\"large-text\"\n                    value={props.settings.emailNotification}\n                    description={props.text.fieldWhoToNotifyDescription}\n                />\n            </SettingRow>\n        );\n    }\n\n    settingsRows = applyFilters('expirationdate_settings_posttype', settingsRows, props, settingActive, useState);\n\n    return (\n        <SettingsFieldset legend={props.legend}>\n            <SettingsTable bodyChildren={settingsRows} />\n        </SettingsFieldset>\n    );\n}\n\nexport default PostTypeSettingsPanel;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport PostTypeSettingsPanel from \"./PostTypeSettingsPanel\";\n\nconst PostTypesSettingsPanels = function (props) {\n    let panels = [];\n\n    for (const [postType, postTypeSettings] of Object.entries(props.settings)) {\n        panels.push(\n            <PostTypeSettingsPanel\n                legend={postTypeSettings.label}\n                text={props.text}\n                postType={postType}\n                settings={postTypeSettings}\n                expireTypeList={props.expireTypeList}\n                taxonomiesList={props.taxonomiesList[postType]}\n                key={`${postType}-panel`}\n            />\n        );\n    }\n\n    return (panels);\n}\n\nexport default PostTypesSettingsPanels;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nimport TrueFalseField from \"./fields/TrueFalseField\";\n\nconst SettingRow = function (props) {\n    const { Fragment } = wp.element;\n\n    return (\n        <tr valign=\"top\">\n            <th scope=\"row\">\n                <label htmlFor=\"\">{props.label}</label>\n            </th>\n            <td>\n                {props.children}\n            </td>\n        </tr>\n    )\n}\n\nexport default SettingRow;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsFieldset = function (props) {\n    return (\n        <fieldset>\n                <legend>{props.legend}</legend>\n                {props.children}\n        </fieldset>\n    )\n}\n\nexport default SettingsFieldset;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsForm = function (props) {\n    return (\n        <form method=\"post\">\n            {props.children}\n        </form>\n    )\n}\n\nexport default SettingsForm;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsSection = function (props) {\n    const { Fragment } = wp.element;\n    return (\n        <Fragment>\n            <h2>{props.title}</h2>\n            <p>{props.description}</p>\n            {props.children}\n        </Fragment>\n    )\n}\n\nexport default SettingsSection;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SettingsTable = function (props) {\n    return (\n        <table className=\"form-table\">\n            <tbody>\n                {props.bodyChildren}\n            </tbody>\n        </table>\n    )\n}\n\nexport default SettingsTable;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SubmitButton = function (props) {\n    return (\n        <input\n            type=\"submit\"\n            name={props.name}\n            value={props.text}\n            className=\"button-primary\"\n        />\n    )\n}\n\nexport default SubmitButton;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nconst NonceField = function (props) {\n    const { Fragment } = wp.element;\n\n    if (! props.name) {\n        props.name = '_wpnonce';\n    }\n\n    if (! props.referrer) {\n        props.referrer = true;\n    }\n\n    return (\n        <Fragment>\n            <input type=\"hidden\" name={props.name} id={props.name} value={props.nonce} />\n\n            {props.referrer &&\n                <input type=\"hidden\" name=\"_wp_http_referer\" value={props.referrer}/>\n            }\n        </Fragment>\n    )\n}\n\nexport default NonceField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst SelectField = function (props) {\n    const { Fragment } = wp.element;\n\n    const optionsList = [];\n\n    if (typeof props.options === 'object' && props.options.forEach) {\n        props.options.forEach((el) => {\n            optionsList.push(<option value={el.value} key={el.value}>{el.label}</option>);\n        });\n    }\n\n    if (optionsList.length === 0) {\n        return (<p>{props.noItemFoundMessage ? props.noItemFoundMessage : 'No items found'}</p>)\n    }\n\n    const onChange = (e) => {\n        if (! props.onChange) {\n            return;\n        }\n\n        props.onChange(jQuery(e.target).val());\n    };\n\n    return (\n        <Fragment>\n            <select\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                defaultValue={props.selected}\n                onChange={onChange}\n                data-data={props.data}\n            >\n                {optionsList}\n            </select>\n\n            {props.children}\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n\nexport default SelectField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TextField = function (props) {\n    const {Fragment, useState, useEffect} = wp.element;\n\n    let description;\n\n    if (props.unescapedDescription) {\n        // If using this option, the HTML has to be escaped before injected into the JS interface.\n        description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n    } else {\n        description = <p className=\"description\">{props.description}</p>;\n    }\n\n    const [theValue, setTheValue] = useState(props.value);\n\n    const onChange = function (e) {\n        setTheValue(jQuery(e.target).val());\n\n        if (props.onChange) {\n            props.onChange();\n        }\n    };\n\n    useEffect(() => {\n        setTheValue(props.value);\n    }, [props.value]);\n\n    return (\n        <Fragment>\n            <input\n                type=\"text\"\n                name={props.name}\n                id={props.name}\n                className={props.className}\n                value={theValue}\n                placeholder={props.placeholder}\n                onChange={onChange}\n            />\n\n            {description}\n        </Fragment>\n    )\n}\n\nexport default TextField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TokensField = (props) => {\n    const { Fragment, useState, useEffect } = wp.element;\n    const { FormTokenField } = wp.components;\n\n    const [stringValue, setStringValue] = useState('');\n\n    useEffect(() => {\n        if (props.value) {\n            setStringValue(props.value.join(','));\n        }\n    }, [props.value]);\n\n    let description;\n\n    if (props.description) {\n        if (props.unescapedDescription) {\n            // If using this option, the HTML has to be escaped before injected into the JS interface.\n            description = <p className=\"description\" dangerouslySetInnerHTML={{__html: props.description}}></p>;\n        } else {\n            description = <p className=\"description\">{props.description}</p>;\n        }\n    }\n\n    const onChange = (value) => {\n        if (props.onChange) {\n            props.onChange(value);\n        }\n\n        if (typeof value === 'object') {\n            setStringValue(value.join(','));\n        } else {\n            setStringValue('');\n        }\n    }\n\n    const value = props.value ? props.value : [];\n \n    return (\n        <Fragment>\n            <FormTokenField\n                label={props.label}\n                value={value}\n                suggestions={props.options}\n                onChange={onChange}\n                maxSuggestions={10}\n                className=\"publishpres-future-token-field\"\n            />\n            <input type=\"hidden\" name={props.name} value={stringValue} />\n\n            {description}\n        </Fragment>\n    )\n}\n\nexport default TokensField;\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\n\nconst TrueFalseField = function (props) {\n    const { Fragment } = wp.element;\n\n    const onChange = (e) => {\n        if (props.onChange) {\n            props.onChange(\n                e.target.value === props.trueValue && jQuery(e.target).is(':checked')\n            );\n            // Check only the true radio... using the field name? or directly the ID\n        }\n    };\n\n    return (\n        <Fragment>\n            <input\n                type=\"radio\"\n                name={props.name}\n                id={props.name + '-true'}\n                value={props.trueValue}\n                defaultChecked={props.selected}\n                onChange={onChange}\n            />\n\n            <label htmlFor={props.name + '-true'}>{props.trueLabel}</label>\n            &nbsp;&nbsp;\n            <input\n                type=\"radio\"\n                name={props.name}\n                defaultChecked={!props.selected}\n                id={props.name + '-false'}\n                value={props.falseValue}\n                onChange={onChange}\n            />\n            <label\n                htmlFor={props.name + '-false'}>{props.falseLabel}</label>\n\n            <p className=\"description\">{props.description}</p>\n        </Fragment>\n    )\n}\n\nexport default TrueFalseField;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*\n * Copyright (c) 2023. PublishPress, All rights reserved.\n */\nimport SettingsSection from \"./components/SettingsSection\";\nimport SettingsForm from \"./components/SettingsForm\";\nimport PostTypesSettingsPanels from \"./components/PostTypesSettingsPanels\";\nimport SubmitButton from \"./components/SubmitButton\";\nimport ButtonsPanel from \"./components/ButtonsPanel\";\nimport NonceField from \"./components/fields/NonceField\";\n\n(function (wp, config) {\n    const { StrictMode, createRoot } = wp.element;\n\n    const SettingsFormPanel = (props) => {\n        return (\n            <StrictMode>\n                <SettingsForm>\n                    <NonceField\n                        name=\"_postExpiratorMenuDefaults_nonce\"\n                        nonce={config.nonce}\n                        referrer={config.referrer}\n                    />\n                    <SettingsSection\n                        title={config.text.settingsSectionTitle}\n                        description={config.text.settingsSectionDescription}>\n                        <PostTypesSettingsPanels\n                            settings={config.settings}\n                            text={config.text}\n                            expireTypeList={config.expireTypeList}\n                            taxonomiesList={config.taxonomiesList}\n                        />\n                    </SettingsSection>\n\n                    <ButtonsPanel>\n                        <SubmitButton\n                            name=\"expirationdateSaveDefaults\"\n                            text={config.text.saveChanges}\n                        />\n                    </ButtonsPanel>\n                </SettingsForm>\n            </StrictMode>\n        )\n    };\n\n    const container = document.getElementById(\"publishpress-future-settings-post-types\");\n    const root = createRoot(container);\n\n    root.render(<SettingsFormPanel />);\n})(window.wp, window.publishpressFutureConfig);\n"],"names":["ButtonsPanel","props","children","PostTypeSettingsPanel","wp","element","useState","useEffect","addQueryArgs","url","applyFilters","hooks","apiFetch","settings","taxonomy","postTypeTaxonomy","setPostTypeTaxonomy","termOptions","setTermOptions","termsSelectIsLoading","setTermsSelectIsLoading","selectedTerms","setSelectedTerms","howToExpire","settingHowToExpire","setSettingHowToExpire","active","settingActive","setSettingActive","onChangeTaxonomy","value","onChangeTerms","onChangeHowToExpire","onChangeActive","updateTermsOptionsState","list","options","settingsTermsOptions","option","forEach","term","id","label","name","push","terms","includes","console","log","postType","path","per_page","then","taxonomiesList","taxAttributes","rest_base","catch","error","termOptionsLabels","map","settingsRows","text","fieldActive","fieldActiveTrue","fieldActiveFalse","fieldActiveDescription","fieldAutoEnable","fieldAutoEnableTrue","fieldAutoEnableFalse","fieldAutoEnableDescription","autoEnabled","fieldTaxonomy","noItemsfound","length","expireTypeList","filter","item","indexOf","fieldHowToExpire","fieldHowToExpireDescription","fieldTerm","fieldTermDescription","fieldDefaultDateTimeOffset","defaultExpireOffset","globalDefaultExpireOffset","fieldDefaultDateTimeOffsetDescription","fieldWhoToNotify","emailNotification","fieldWhoToNotifyDescription","legend","PostTypesSettingsPanels","panels","Object","entries","postTypeSettings","SettingRow","Fragment","SettingsFieldset","SettingsForm","SettingsSection","title","description","SettingsTable","bodyChildren","SubmitButton","NonceField","referrer","nonce","SelectField","optionsList","el","noItemFoundMessage","onChange","e","jQuery","target","val","className","selected","data","TextField","unescapedDescription","__html","theValue","setTheValue","placeholder","TokensField","FormTokenField","components","stringValue","setStringValue","join","TrueFalseField","trueValue","is","trueLabel","falseValue","falseLabel","config","StrictMode","createRoot","SettingsFormPanel","settingsSectionTitle","settingsSectionDescription","saveChanges","container","document","getElementById","root","render","window","publishpressFutureConfig"],"sourceRoot":""}