{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/jsx/block.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wp","config","registerPlugin","plugins","__","i18n","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","Component","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","render","arguments","state","categoriesList","catIdVsName","newMeta","postMeta","this","attributes","data","select","getEditedPostAttribute","postType","getCurrentPostType","enabled","defaults","autoEnable","date","Date","expireAction","getExpireType","categories","includes","getCategories","setTime","getTimezoneOffset","default_categories","default_date","parseInt","getDate","dispatch","meta","taxonomy","setState","apiFetch","path","url","addQueryArgs","per_page","hide_empty","then","list","forEach","cat","id","context","taxAttributes","rest_base","terms","term","setPostMeta","attribute","actionsList","label","_","union","selectedCats","map","title","icon","initialOpen","checked","onChange","currentDate","is12Hour","options","suggestions","selectCategories","maxSuggestions","typeNew","typeOld","categoriesNew","categoriesOld","length","tokens","some","token","newDate","parse","getTime","window"],"mappings":"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","file":"block.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function ( wp, config ) {\r\n\r\n    const { registerPlugin } = wp.plugins;\r\n    const { __ } = wp.i18n;\r\n    const { PluginDocumentSettingPanel } = wp.editPost;\r\n    const { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\r\n    const { Fragment, Component } = wp.element;\r\n    const { decodeEntities } = wp.htmlEntities;\r\n    const { isEmpty, keys, compact } = lodash;\r\n\r\n    class PostExpiratorSidebar extends Component {\r\n        constructor() {\r\n            super( ...arguments );\r\n\r\n            this.state = {\r\n                categoriesList: [],\r\n                catIdVsName: [],\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            const { attributes } = this.state;\r\n\r\n            const postMeta = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'meta' );\r\n            const postType = wp.data.select('core/editor').getCurrentPostType();\r\n\r\n            let enabled = config.defaults.autoEnable == 1;\r\n            let date = new Date();\r\n\r\n            let expireAction = this.getExpireType(postMeta);\r\n\r\n            let categories = [];\r\n            if(expireAction.includes('category')){\r\n                categories = this.getCategories(postMeta);\r\n            }\r\n\r\n            if(postMeta['_expiration-date-status'] && postMeta['_expiration-date-status'] === 'saved'){\r\n                enabled = true;\r\n            }\r\n\r\n            if(postMeta['_expiration-date']){\r\n                date.setTime((postMeta['_expiration-date'] + date.getTimezoneOffset() * 60) * 1000);\r\n            }else{\r\n                categories = config.default_categories;\r\n                if(config.default_date){\r\n                    date.setTime((parseInt(config.default_date) + date.getTimezoneOffset() * 60) * 1000);\r\n                    // update the post meta for date so that the user does not have to click the date to set it\r\n                    const setPostMeta = (newMeta) => wp.data.dispatch( 'core/editor' ).editPost( { meta: newMeta } );\r\n                    setPostMeta( {'_expiration-date': this.getDate(date) } );\r\n                }\r\n            }\r\n\r\n            let taxonomy = config.defaults.taxonomy || 'category';\r\n\r\n            this.setState( {\r\n                enabled: enabled,\r\n                date: date,\r\n                expireAction: expireAction,\r\n                categories: categories,\r\n                taxonomy: taxonomy,\r\n            } );\r\n\r\n            let categoriesList = [];\r\n            let catIdVsName = [];\r\n\r\n            if( (!taxonomy && postType === 'post') || taxonomy === 'category' ){\r\n                wp.apiFetch( {\r\n                    path: wp.url.addQueryArgs( 'wp/v2/categories', { per_page: -1, hide_empty: false } ),\r\n                } ).then( ( list ) => {\r\n                    list.forEach(cat => {\r\n                        categoriesList[ cat.name ] = cat;\r\n                        catIdVsName[ cat.id ] = cat.name;\r\n                    });\r\n                    this.setState( { categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: __( 'Category' ) } );\r\n                } );\r\n            }else if(postType !== 'page') {\r\n                wp.apiFetch( {\r\n                    path: wp.url.addQueryArgs( `wp/v2/taxonomies/${taxonomy}`, { context: 'edit' } ),\r\n                } ).then( ( taxAttributes ) => {\r\n                    // fetch all terms\r\n                    wp.apiFetch( {\r\n                        path: wp.url.addQueryArgs( `wp/v2/${taxAttributes.rest_base}`, { context: 'edit' } ),\r\n                    } ).then( ( terms ) => {\r\n                        terms.forEach(term => {\r\n                            categoriesList[ decodeEntities(term.name) ] = term;\r\n                            catIdVsName[ term.id ] = decodeEntities(term.name);\r\n                        });\r\n                        this.setState( { categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: decodeEntities(taxAttributes.name) } );\r\n                    });\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        componentDidUpdate() {\r\n            const { enabled, date, expireAction, categories, attribute } = this.state;\r\n            const setPostMeta = (newMeta) => wp.data.dispatch( 'core/editor' ).editPost( { meta: newMeta } );\r\n\r\n            switch(attribute){\r\n                case 'enabled':\r\n                    setPostMeta( { '_expiration-date-status' : (enabled ? 'saved' : '' ) } );\r\n                    break;\r\n                case 'date':\r\n                    if(typeof date === 'string'){\r\n                        setPostMeta( {'_expiration-date': this.getDate(date) } );\r\n                    }\r\n                    break;\r\n                case 'action':\r\n                    setPostMeta( { '_expiration-date-type': expireAction } );\r\n                    if(!expireAction.includes('category')){\r\n                        setPostMeta( { '_expiration-date-categories': [] } );\r\n                    }\r\n                    break;\r\n                case 'category':\r\n                    setPostMeta( { '_expiration-date-categories': categories } );\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        render() {\r\n            const { categoriesList, catIdVsName } = this.state;\r\n            const { enabled, date, expireAction, categories, taxonomy } = this.state;\r\n\r\n            const postType = wp.data.select('core/editor').getCurrentPostType();\r\n\r\n            let actionsList = [\r\n                { label: __( 'Draft', 'post-expirator' ), value: 'draft' },\r\n                { label: __( 'Delete', 'post-expirator' ), value: 'delete' },\r\n                { label: __( 'Trash', 'post-expirator' ), value: 'trash' },\r\n                { label: __( 'Private', 'post-expirator' ), value: 'private' },\r\n                { label: __( 'Stick', 'post-expirator' ), value: 'stick' },\r\n                { label: __( 'Unstick', 'post-expirator' ), value: 'unstick' },\r\n            ];\r\n\r\n            if(postType !== 'page'){\r\n                actionsList = _.union(actionsList, [\r\n                    { label: __('Category: Replace', 'post-expirator'), value: 'category' },\r\n                    { label: __('Category: Add', 'post-expirator'), value: 'category-add' },\r\n                    { label: __('Category: Remove', 'post-expirator'), value: 'category-remove' },\r\n                ]);\r\n            }\r\n\r\n            let selectedCats = categories && compact(categories.map((id) => catIdVsName[id] || false ));\r\n            if(typeof selectedCats === 'string'){\r\n                selectedCats = [];\r\n            }\r\n    \r\n            return (\r\n                <PluginDocumentSettingPanel title={ __( 'Post Expirator', 'post-expirator' ) } icon=\"calendar\" initialOpen={ enabled }>\r\n                    <PanelRow>\r\n                        <CheckboxControl\r\n                            label={ __( 'Enable Post Expiration', 'post-expirator' ) }\r\n                            checked={ enabled }\r\n                            onChange={ (value) => { this.setState( { enabled: !enabled, attribute: 'enabled' } ) } }\r\n                        />\r\n                    </PanelRow>\r\n                    { enabled && (\r\n                        <Fragment>\r\n                            <PanelRow>\r\n                                <DateTimePicker\r\n                                    currentDate={ date }\r\n                                    onChange={ ( value ) => this.setState( { date: value, attribute: 'date' } ) }\r\n                                    is12Hour={ true }\r\n                                />\r\n                            </PanelRow>\r\n                            <SelectControl\r\n                                label={ __( 'How to expire', 'post-expirator' ) }\r\n                                value={ expireAction }\r\n                                options={ actionsList }\r\n                                onChange={ (value) => { this.setState( { expireAction: value, attribute: 'action' } ) } }\r\n                            />\r\n                            { expireAction.includes('category') && \r\n                                (\r\n                                    ( isEmpty(keys(categoriesList)) && (\r\n                                        <Fragment>\r\n                                            { __( 'Loading', 'post-expirator' ) + ` (${taxonomy})` }\r\n                                            <Spinner/>\r\n                                        </Fragment>\r\n                                    ) )\r\n                                    ||\r\n                                    (\r\n                                <FormTokenField\r\n                                    label={ __('Expiration Categories', 'post-expirator') + ` (${taxonomy})` }\r\n                                    value={ selectedCats }\r\n                                    suggestions={ Object.keys(categoriesList) }\r\n                                    onChange={ ( value ) => { this.setState( { categories: this.selectCategories(value), attribute: 'category' } ) } }\r\n                                    maxSuggestions={ 10 }\r\n                                />\r\n                                    )\r\n                            ) }\r\n                        </Fragment>\r\n                    ) }\r\n                </PluginDocumentSettingPanel>\r\n            );\r\n        }\r\n\r\n        // what action to take on expiration\r\n        getExpireType(postMeta) {\r\n            let typeNew = postMeta['_expiration-date-type'];\r\n            let typeOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['expireType'];\r\n\r\n            if(typeNew){\r\n                return typeNew;\r\n            }\r\n\r\n            if(typeOld){\r\n                return typeOld;\r\n            }\r\n\r\n            return 'draft';\r\n        }\r\n\r\n        // what categories to add/remove/replace\r\n        getCategories(postMeta) {\r\n            let categoriesNew = postMeta['_expiration-date-categories'] && postMeta['_expiration-date-categories'];\r\n            let categoriesOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['category'];\r\n\r\n            if(typeof categoriesNew === 'object' && categoriesNew.length > 0){\r\n                return categoriesNew;\r\n            }\r\n\r\n            if(categoriesOld && typeof categoriesOld !== 'undefined' && typeof categoriesOld !== 'object'){\r\n                categories = [ categoriesOld ];\r\n            }\r\n\r\n            return categoriesOld;\r\n\r\n        }\r\n\r\n        // fired for the autocomplete\r\n        selectCategories(tokens) {\r\n            const { categoriesList, catIdVsName } = this.state;\r\n\r\n            var hasNoSuggestion = tokens.some(function (token) {\r\n                return typeof token === 'string' && !categoriesList[token];\r\n            });\r\n\r\n            if (hasNoSuggestion) {\r\n                return;\r\n            }\r\n\r\n            var categories = tokens.map(function (token) {\r\n                return typeof token === 'string' ? categoriesList[token] : token;\r\n            })\r\n\r\n            return categories.map( (cat) => cat.id );\r\n        }\r\n\r\n        getDate(date){\r\n            let newDate = new Date();\r\n            newDate.setTime(Date.parse(date));\r\n            newDate.setTime(newDate.getTime() - new Date().getTimezoneOffset() * 60 * 1000);\r\n            return ((newDate.getTime()) / 1000);\r\n        }\r\n\r\n    }\r\n\r\n    registerPlugin( 'postexpirator-sidebar', {\r\n        render: PostExpiratorSidebar\r\n    } );\r\n\r\n\r\n})( window.wp, config );"],"sourceRoot":""}