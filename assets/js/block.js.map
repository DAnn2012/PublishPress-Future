{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/jsx/block.jsx"],"names":["wp","config","registerPlugin","plugins","__","i18n","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","Component","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","PostExpiratorSidebar","arguments","state","categoriesList","catIdVsName","attributes","postMeta","data","select","getEditedPostAttribute","postType","getCurrentPostType","enabled","defaults","autoEnable","date","Date","expireAction","getExpireType","categories","includes","getCategories","setTime","getTimezoneOffset","default_categories","default_date","parseInt","taxonomy","setState","apiFetch","path","url","addQueryArgs","per_page","hide_empty","then","list","forEach","cat","name","id","context","taxAttributes","rest_base","terms","term","attribute","setPostMeta","newMeta","dispatch","meta","getDate","actionsList","label","value","_","union","selectedCats","map","Object","selectCategories","typeNew","typeOld","categoriesNew","categoriesOld","length","tokens","hasNoSuggestion","some","token","newDate","parse","getTime","render","window"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;;AClFA,CAAC,UAAWA,EAAX,EAAeC,MAAf,EAAwB;AAAA,QAEbC,cAFa,GAEMF,GAAGG,OAFT,CAEbD,cAFa;AAAA,QAGbE,EAHa,GAGNJ,GAAGK,IAHG,CAGbD,EAHa;AAAA,QAIbE,0BAJa,GAIkBN,GAAGO,QAJrB,CAIbD,0BAJa;AAAA,yBAKyEN,GAAGQ,UAL5E;AAAA,QAKbC,QALa,kBAKbA,QALa;AAAA,QAKHC,cALG,kBAKHA,cALG;AAAA,QAKaC,eALb,kBAKaA,eALb;AAAA,QAK8BC,aAL9B,kBAK8BA,aAL9B;AAAA,QAK6CC,cAL7C,kBAK6CA,cAL7C;AAAA,QAK6DC,OAL7D,kBAK6DA,OAL7D;AAAA,sBAMWd,GAAGe,OANd;AAAA,QAMbC,QANa,eAMbA,QANa;AAAA,QAMHC,SANG,eAMHA,SANG;AAAA,QAObC,cAPa,GAOMlB,GAAGmB,YAPT,CAObD,cAPa;AAAA,kBAQcE,MARd;AAAA,QAQbC,OARa,WAQbA,OARa;AAAA,QAQJC,IARI,WAQJA,IARI;AAAA,QAQEC,OARF,WAQEA,OARF;;AAAA,QAUfC,oBAVe;AAAA;;AAWjB,wCAAc;AAAA;;AAAA,qJACAC,SADA;;AAGV,kBAAKC,KAAL,GAAa;AACTC,gCAAgB,EADP;AAETC,6BAAa;AAFJ,aAAb;AAHU;AAOb;;AAlBgB;AAAA;AAAA,iDAoBI;AAAA;;AAAA,oBACTC,UADS,GACM,KAAKH,KADX,CACTG,UADS;;;AAGjB,oBAAMC,WAAW9B,GAAG+B,IAAH,CAAQC,MAAR,CAAgB,aAAhB,EAAgCC,sBAAhC,CAAwD,MAAxD,CAAjB;AACA,oBAAMC,WAAWlC,GAAG+B,IAAH,CAAQC,MAAR,CAAe,aAAf,EAA8BG,kBAA9B,EAAjB;;AAEA,oBAAIC,UAAUnC,OAAOoC,QAAP,CAAgBC,UAAhB,IAA8B,CAA5C;AACA,oBAAIC,OAAO,IAAIC,IAAJ,EAAX;;AAEA,oBAAIC,eAAe,KAAKC,aAAL,CAAmBZ,QAAnB,CAAnB;;AAEA,oBAAIa,aAAa,EAAjB;AACA,oBAAGF,aAAaG,QAAb,CAAsB,UAAtB,CAAH,EAAqC;AACjCD,iCAAa,KAAKE,aAAL,CAAmBf,QAAnB,CAAb;AACH;;AAED,oBAAGA,SAAS,yBAAT,KAAuCA,SAAS,yBAAT,MAAwC,OAAlF,EAA0F;AACtFM,8BAAU,IAAV;AACH;;AAED,oBAAGN,SAAS,kBAAT,CAAH,EAAgC;AAC5BS,yBAAKO,OAAL,CAAa,CAAChB,SAAS,kBAAT,IAA+BS,KAAKQ,iBAAL,KAA2B,EAA3D,IAAiE,IAA9E;AACH,iBAFD,MAEK;AACDJ,iCAAa1C,OAAO+C,kBAApB;AACA,wBAAG/C,OAAOgD,YAAV,EAAuB;AACnBV,6BAAKO,OAAL,CAAa,CAACI,SAASjD,OAAOgD,YAAhB,IAAgCV,KAAKQ,iBAAL,KAA2B,EAA5D,IAAkE,IAA/E;AACH;AACJ;;AAED,oBAAII,WAAWlD,OAAOoC,QAAP,CAAgBc,QAAhB,IAA4B,UAA3C;;AAEA,qBAAKC,QAAL,CAAe;AACXhB,6BAASA,OADE;AAEXG,0BAAMA,IAFK;AAGXE,kCAAcA,YAHH;AAIXE,gCAAYA,UAJD;AAKXQ,8BAAUA;AALC,iBAAf;;AAQA,oBAAIxB,iBAAiB,EAArB;AACA,oBAAIC,cAAc,EAAlB;;AAEA,oBAAK,CAACuB,QAAD,IAAajB,aAAa,MAA3B,IAAsCiB,aAAa,UAAvD,EAAmE;AAC/DnD,uBAAGqD,QAAH,CAAa;AACTC,8BAAMtD,GAAGuD,GAAH,CAAOC,YAAP,CAAqB,kBAArB,EAAyC,EAAEC,UAAU,CAAC,CAAb,EAAgBC,YAAY,KAA5B,EAAzC;AADG,qBAAb,EAEIC,IAFJ,CAEU,UAAEC,IAAF,EAAY;AAClBA,6BAAKC,OAAL,CAAa,eAAO;AAChBlC,2CAAgBmC,IAAIC,IAApB,IAA6BD,GAA7B;AACAlC,wCAAakC,IAAIE,EAAjB,IAAwBF,IAAIC,IAA5B;AACH,yBAHD;AAIA,+BAAKX,QAAL,CAAe,EAAEzB,gBAAgBA,cAAlB,EAAkCC,aAAaA,WAA/C,EAA4DuB,UAAU/C,GAAI,UAAJ,CAAtE,EAAf;AACH,qBARD;AASH,iBAVD,MAUM,IAAG8B,aAAa,MAAhB,EAAwB;AAC1BlC,uBAAGqD,QAAH,CAAa;AACTC,8BAAMtD,GAAGuD,GAAH,CAAOC,YAAP,uBAAyCL,QAAzC,EAAqD,EAAEc,SAAS,MAAX,EAArD;AADG,qBAAb,EAEIN,IAFJ,CAEU,UAAEO,aAAF,EAAqB;AAC3B;AACAlE,2BAAGqD,QAAH,CAAa;AACTC,kCAAMtD,GAAGuD,GAAH,CAAOC,YAAP,YAA8BU,cAAcC,SAA5C,EAAyD,EAAEF,SAAS,MAAX,EAAzD;AADG,yBAAb,EAEIN,IAFJ,CAEU,UAAES,KAAF,EAAa;AACnBA,kCAAMP,OAAN,CAAc,gBAAQ;AAClBlC,+CAAgBT,eAAemD,KAAKN,IAApB,CAAhB,IAA8CM,IAA9C;AACAzC,4CAAayC,KAAKL,EAAlB,IAAyB9C,eAAemD,KAAKN,IAApB,CAAzB;AACH,6BAHD;AAIA,mCAAKX,QAAL,CAAe,EAAEzB,gBAAgBA,cAAlB,EAAkCC,aAAaA,WAA/C,EAA4DuB,UAAUjC,eAAegD,cAAcH,IAA7B,CAAtE,EAAf;AACH,yBARD;AASH,qBAbD;AAcH;AAEJ;AAzFgB;AAAA;AAAA,iDA2FI;AAAA,6BAC8C,KAAKrC,KADnD;AAAA,oBACTU,OADS,UACTA,OADS;AAAA,oBACAG,IADA,UACAA,IADA;AAAA,oBACME,YADN,UACMA,YADN;AAAA,oBACoBE,UADpB,UACoBA,UADpB;AAAA,oBACgC2B,SADhC,UACgCA,SADhC;;AAEjB,oBAAMC,cAAc,SAAdA,WAAc,CAACC,OAAD;AAAA,2BAAaxE,GAAG+B,IAAH,CAAQ0C,QAAR,CAAkB,aAAlB,EAAkClE,QAAlC,CAA4C,EAAEmE,MAAMF,OAAR,EAA5C,CAAb;AAAA,iBAApB;AACA,oBAAM1C,WAAW9B,GAAG+B,IAAH,CAAQC,MAAR,CAAgB,aAAhB,EAAgCC,sBAAhC,CAAwD,MAAxD,CAAjB;;AAEA,wBAAOqC,SAAP;AACI,yBAAK,SAAL;AACIC,oCAAa,EAAE,2BAA6BnC,UAAU,OAAV,GAAoB,EAAnD,EAAb;AACA;AACA;AACA,4BAAG,CAACN,SAAS,kBAAT,CAAJ,EAAiC;AAC7ByC,wCAAa,EAAC,oBAAoB,KAAKI,OAAL,CAAapC,IAAb,CAArB,EAAb;AACH;AACD;AACJ,yBAAK,MAAL;AACI,4BAAG,OAAOA,IAAP,KAAgB,QAAnB,EAA4B;AACxBgC,wCAAa,EAAC,oBAAoB,KAAKI,OAAL,CAAapC,IAAb,CAArB,EAAb;AACH;AACD;AACJ,yBAAK,QAAL;AACIgC,oCAAa,EAAE,yBAAyB9B,YAA3B,EAAb;AACA,4BAAG,CAACA,aAAaG,QAAb,CAAsB,UAAtB,CAAJ,EAAsC;AAClC2B,wCAAa,EAAE,+BAA+B,EAAjC,EAAb;AACH;AACD;AACJ,yBAAK,UAAL;AACIA,oCAAa,EAAE,+BAA+B5B,UAAjC,EAAb;AACA;AAtBR;AAyBH;AAzHgB;AAAA;AAAA,qCA2HR;AAAA;;AAAA,8BACmC,KAAKjB,KADxC;AAAA,oBACGC,cADH,WACGA,cADH;AAAA,oBACmBC,WADnB,WACmBA,WADnB;AAAA,8BAEyD,KAAKF,KAF9D;AAAA,oBAEGU,OAFH,WAEGA,OAFH;AAAA,oBAEYG,IAFZ,WAEYA,IAFZ;AAAA,oBAEkBE,YAFlB,WAEkBA,YAFlB;AAAA,oBAEgCE,UAFhC,WAEgCA,UAFhC;AAAA,oBAE4CQ,QAF5C,WAE4CA,QAF5C;;;AAIL,oBAAMjB,WAAWlC,GAAG+B,IAAH,CAAQC,MAAR,CAAe,aAAf,EAA8BG,kBAA9B,EAAjB;;AAEA,oBAAIyC,cAAc,CACd,EAAEC,OAAOzE,GAAI,OAAJ,EAAa,gBAAb,CAAT,EAA0C0E,OAAO,OAAjD,EADc,EAEd,EAAED,OAAOzE,GAAI,QAAJ,EAAc,gBAAd,CAAT,EAA2C0E,OAAO,QAAlD,EAFc,EAGd,EAAED,OAAOzE,GAAI,OAAJ,EAAa,gBAAb,CAAT,EAA0C0E,OAAO,OAAjD,EAHc,EAId,EAAED,OAAOzE,GAAI,SAAJ,EAAe,gBAAf,CAAT,EAA4C0E,OAAO,SAAnD,EAJc,EAKd,EAAED,OAAOzE,GAAI,OAAJ,EAAa,gBAAb,CAAT,EAA0C0E,OAAO,OAAjD,EALc,EAMd,EAAED,OAAOzE,GAAI,SAAJ,EAAe,gBAAf,CAAT,EAA4C0E,OAAO,SAAnD,EANc,CAAlB;;AASA,oBAAG5C,aAAa,MAAhB,EAAuB;AACnB0C,kCAAcG,EAAEC,KAAF,CAAQJ,WAAR,EAAqB,CAC/B,EAAEC,OAAOzE,GAAG,mBAAH,EAAwB,gBAAxB,CAAT,EAAoD0E,OAAO,UAA3D,EAD+B,EAE/B,EAAED,OAAOzE,GAAG,eAAH,EAAoB,gBAApB,CAAT,EAAgD0E,OAAO,cAAvD,EAF+B,EAG/B,EAAED,OAAOzE,GAAG,kBAAH,EAAuB,gBAAvB,CAAT,EAAmD0E,OAAO,iBAA1D,EAH+B,CAArB,CAAd;AAKH;;AAED,oBAAIG,eAAetC,cAAcpB,QAAQoB,WAAWuC,GAAX,CAAe,UAAClB,EAAD;AAAA,2BAAQpC,YAAYoC,EAAZ,KAAmB,KAA3B;AAAA,iBAAf,CAAR,CAAjC;AACA,oBAAG,OAAOiB,YAAP,KAAwB,QAA3B,EAAoC;AAChCA,mCAAe,EAAf;AACH;;AAED,uBACI;AAAC,8CAAD;AAAA,sBAA4B,OAAQ7E,GAAI,gBAAJ,EAAsB,gBAAtB,CAApC,EAA+E,MAAK,UAApF,EAA+F,aAAcgC,OAA7G;AACI;AAAC,gCAAD;AAAA;AACI,4CAAC,eAAD;AACI,mCAAQhC,GAAI,wBAAJ,EAA8B,gBAA9B,CADZ;AAEI,qCAAUgC,OAFd;AAGI,sCAAW,kBAAC0C,KAAD,EAAW;AAAE,uCAAK1B,QAAL,CAAe,EAAEhB,SAAS,CAACA,OAAZ,EAAqBkC,WAAW,SAAhC,EAAf;AAA8D;AAH1F;AADJ,qBADJ;AAQMlC,+BACE;AAAC,gCAAD;AAAA;AACI;AAAC,oCAAD;AAAA;AACI,gDAAC,cAAD;AACI,6CAAcG,IADlB;AAEI,0CAAW,kBAAEuC,KAAF;AAAA,2CAAa,OAAK1B,QAAL,CAAe,EAAEb,MAAMuC,KAAR,EAAeR,WAAW,MAA1B,EAAf,CAAb;AAAA,iCAFf;AAGI,0CAAW;AAHf;AADJ,yBADJ;AAQI,4CAAC,aAAD;AACI,mCAAQlE,GAAI,eAAJ,EAAqB,gBAArB,CADZ;AAEI,mCAAQqC,YAFZ;AAGI,qCAAUmC,WAHd;AAII,sCAAW,kBAACE,KAAD,EAAW;AAAE,uCAAK1B,QAAL,CAAe,EAAEX,cAAcqC,KAAhB,EAAuBR,WAAW,QAAlC,EAAf;AAA+D;AAJ3F,0BARJ;AAcM7B,qCAAaG,QAAb,CAAsB,UAAtB,MAEQvB,QAAQC,KAAKK,cAAL,CAAR,KACE;AAAC,oCAAD;AAAA;AACMvB,+BAAI,SAAJ,EAAe,gBAAf,YAAyC+C,QAAzC,OADN;AAEI,gDAAC,OAAD;AAFJ,yBADJ,IAQJ,oBAAC,cAAD;AACI,mCAAQ/C,GAAG,uBAAH,EAA4B,gBAA5B,YAAqD+C,QAArD,OADZ;AAEI,mCAAQ8B,YAFZ;AAGI,yCAAcE,OAAO7D,IAAP,CAAYK,cAAZ,CAHlB;AAII,sCAAW,kBAAEmD,KAAF,EAAa;AAAE,uCAAK1B,QAAL,CAAe,EAAET,YAAY,OAAKyC,gBAAL,CAAsBN,KAAtB,CAAd,EAA4CR,WAAW,UAAvD,EAAf;AAAsF,6BAJpH;AAKI,4CAAiB;AALrB,0BAVF;AAdN;AATR,iBADJ;AA+CH;;AAED;;AAxMiB;AAAA;AAAA,0CAyMHxC,QAzMG,EAyMO;AACpB,oBAAIuD,UAAUvD,SAAS,uBAAT,CAAd;AACA,oBAAIwD,UAAUxD,SAAS,0BAAT,KAAwCA,SAAS,0BAAT,EAAqC,YAArC,CAAtD;;AAEA,oBAAGuD,OAAH,EAAW;AACP,2BAAOA,OAAP;AACH;;AAED,oBAAGC,OAAH,EAAW;AACP,2BAAOA,OAAP;AACH;;AAED,uBAAO,OAAP;AACH;;AAED;;AAxNiB;AAAA;AAAA,0CAyNHxD,QAzNG,EAyNO;AACpB,oBAAIyD,gBAAgBzD,SAAS,6BAAT,KAA2CA,SAAS,6BAAT,CAA/D;AACA,oBAAI0D,gBAAgB1D,SAAS,0BAAT,KAAwCA,SAAS,0BAAT,EAAqC,UAArC,CAA5D;;AAEA,oBAAG,QAAOyD,aAAP,yCAAOA,aAAP,OAAyB,QAAzB,IAAqCA,cAAcE,MAAd,GAAuB,CAA/D,EAAiE;AAC7D,2BAAOF,aAAP;AACH;;AAED,oBAAGC,iBAAiB,OAAOA,aAAP,KAAyB,WAA1C,IAAyD,QAAOA,aAAP,yCAAOA,aAAP,OAAyB,QAArF,EAA8F;AAC1F7C,iCAAa,CAAE6C,aAAF,CAAb;AACH;;AAED,uBAAOA,aAAP;AAEH;;AAED;;AAzOiB;AAAA;AAAA,6CA0OAE,MA1OA,EA0OQ;AAAA,8BACmB,KAAKhE,KADxB;AAAA,oBACbC,cADa,WACbA,cADa;AAAA,oBACGC,WADH,WACGA,WADH;;;AAGrB,oBAAI+D,kBAAkBD,OAAOE,IAAP,CAAY,UAAUC,KAAV,EAAiB;AAC/C,2BAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAAClE,eAAekE,KAAf,CAArC;AACH,iBAFqB,CAAtB;;AAIA,oBAAIF,eAAJ,EAAqB;AACjB;AACH;;AAED,oBAAIhD,aAAa+C,OAAOR,GAAP,CAAW,UAAUW,KAAV,EAAiB;AACzC,2BAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BlE,eAAekE,KAAf,CAA5B,GAAoDA,KAA3D;AACH,iBAFgB,CAAjB;;AAIA,uBAAOlD,WAAWuC,GAAX,CAAgB,UAACpB,GAAD;AAAA,2BAASA,IAAIE,EAAb;AAAA,iBAAhB,CAAP;AACH;AA1PgB;AAAA;AAAA,oCA4PTzB,IA5PS,EA4PJ;AACT,oBAAIuD,UAAU,IAAItD,IAAJ,EAAd;AACAsD,wBAAQhD,OAAR,CAAgBN,KAAKuD,KAAL,CAAWxD,IAAX,CAAhB;AACAuD,wBAAQhD,OAAR,CAAgBgD,QAAQE,OAAR,KAAoB,IAAIxD,IAAJ,GAAWO,iBAAX,KAAiC,EAAjC,GAAsC,IAA1E;AACA,uBAAS+C,QAAQE,OAAR,EAAD,GAAsB,IAA9B;AACH;AAjQgB;;AAAA;AAAA,MAUc/E,SAVd;;AAqQrBf,mBAAgB,uBAAhB,EAAyC;AACrC+F,gBAAQzE;AAD6B,KAAzC;AAKH,CA1QD,EA0QI0E,OAAOlG,EA1QX,EA0QeC,MA1Qf,E","file":"block.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function ( wp, config ) {\r\n\r\n    const { registerPlugin } = wp.plugins;\r\n    const { __ } = wp.i18n;\r\n    const { PluginDocumentSettingPanel } = wp.editPost;\r\n    const { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\r\n    const { Fragment, Component } = wp.element;\r\n    const { decodeEntities } = wp.htmlEntities;\r\n    const { isEmpty, keys, compact } = lodash;\r\n\r\n    class PostExpiratorSidebar extends Component {\r\n        constructor() {\r\n            super( ...arguments );\r\n\r\n            this.state = {\r\n                categoriesList: [],\r\n                catIdVsName: [],\r\n            }\r\n        }\r\n\r\n        componentWillMount() {\r\n            const { attributes } = this.state;\r\n\r\n            const postMeta = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'meta' );\r\n            const postType = wp.data.select('core/editor').getCurrentPostType();\r\n\r\n            let enabled = config.defaults.autoEnable == 1;\r\n            let date = new Date();\r\n\r\n            let expireAction = this.getExpireType(postMeta);\r\n\r\n            let categories = [];\r\n            if(expireAction.includes('category')){\r\n                categories = this.getCategories(postMeta);\r\n            }\r\n\r\n            if(postMeta['_expiration-date-status'] && postMeta['_expiration-date-status'] === 'saved'){\r\n                enabled = true;\r\n            }\r\n\r\n            if(postMeta['_expiration-date']){\r\n                date.setTime((postMeta['_expiration-date'] + date.getTimezoneOffset() * 60) * 1000);\r\n            }else{\r\n                categories = config.default_categories;\r\n                if(config.default_date){\r\n                    date.setTime((parseInt(config.default_date) + date.getTimezoneOffset() * 60) * 1000);\r\n                }\r\n            }\r\n\r\n            let taxonomy = config.defaults.taxonomy || 'category';\r\n\r\n            this.setState( {\r\n                enabled: enabled,\r\n                date: date,\r\n                expireAction: expireAction,\r\n                categories: categories,\r\n                taxonomy: taxonomy,\r\n            } );\r\n\r\n            let categoriesList = [];\r\n            let catIdVsName = [];\r\n\r\n            if( (!taxonomy && postType === 'post') || taxonomy === 'category' ){\r\n                wp.apiFetch( {\r\n                    path: wp.url.addQueryArgs( 'wp/v2/categories', { per_page: -1, hide_empty: false } ),\r\n                } ).then( ( list ) => {\r\n                    list.forEach(cat => {\r\n                        categoriesList[ cat.name ] = cat;\r\n                        catIdVsName[ cat.id ] = cat.name;\r\n                    });\r\n                    this.setState( { categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: __( 'Category' ) } );\r\n                } );\r\n            }else if(postType !== 'page') {\r\n                wp.apiFetch( {\r\n                    path: wp.url.addQueryArgs( `wp/v2/taxonomies/${taxonomy}`, { context: 'edit' } ),\r\n                } ).then( ( taxAttributes ) => {\r\n                    // fetch all terms\r\n                    wp.apiFetch( {\r\n                        path: wp.url.addQueryArgs( `wp/v2/${taxAttributes.rest_base}`, { context: 'edit' } ),\r\n                    } ).then( ( terms ) => {\r\n                        terms.forEach(term => {\r\n                            categoriesList[ decodeEntities(term.name) ] = term;\r\n                            catIdVsName[ term.id ] = decodeEntities(term.name);\r\n                        });\r\n                        this.setState( { categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: decodeEntities(taxAttributes.name) } );\r\n                    });\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        componentDidUpdate() {\r\n            const { enabled, date, expireAction, categories, attribute } = this.state;\r\n            const setPostMeta = (newMeta) => wp.data.dispatch( 'core/editor' ).editPost( { meta: newMeta } );\r\n            const postMeta = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'meta' );\r\n\r\n            switch(attribute){\r\n                case 'enabled':\r\n                    setPostMeta( { '_expiration-date-status' : (enabled ? 'saved' : '' ) } );\r\n                    // if date is not set when the checkbox is enabled, set it to the default date\r\n                    // this is to prevent the user from having to click the date to set it\r\n                    if(!postMeta['_expiration-date']){\r\n                        setPostMeta( {'_expiration-date': this.getDate(date) } );\r\n                    }\r\n                    break;\r\n                case 'date':\r\n                    if(typeof date === 'string'){\r\n                        setPostMeta( {'_expiration-date': this.getDate(date) } );\r\n                    }\r\n                    break;\r\n                case 'action':\r\n                    setPostMeta( { '_expiration-date-type': expireAction } );\r\n                    if(!expireAction.includes('category')){\r\n                        setPostMeta( { '_expiration-date-categories': [] } );\r\n                    }\r\n                    break;\r\n                case 'category':\r\n                    setPostMeta( { '_expiration-date-categories': categories } );\r\n                    break;\r\n            }\r\n\r\n        }\r\n\r\n        render() {\r\n            const { categoriesList, catIdVsName } = this.state;\r\n            const { enabled, date, expireAction, categories, taxonomy } = this.state;\r\n\r\n            const postType = wp.data.select('core/editor').getCurrentPostType();\r\n\r\n            let actionsList = [\r\n                { label: __( 'Draft', 'post-expirator' ), value: 'draft' },\r\n                { label: __( 'Delete', 'post-expirator' ), value: 'delete' },\r\n                { label: __( 'Trash', 'post-expirator' ), value: 'trash' },\r\n                { label: __( 'Private', 'post-expirator' ), value: 'private' },\r\n                { label: __( 'Stick', 'post-expirator' ), value: 'stick' },\r\n                { label: __( 'Unstick', 'post-expirator' ), value: 'unstick' },\r\n            ];\r\n\r\n            if(postType !== 'page'){\r\n                actionsList = _.union(actionsList, [\r\n                    { label: __('Category: Replace', 'post-expirator'), value: 'category' },\r\n                    { label: __('Category: Add', 'post-expirator'), value: 'category-add' },\r\n                    { label: __('Category: Remove', 'post-expirator'), value: 'category-remove' },\r\n                ]);\r\n            }\r\n\r\n            let selectedCats = categories && compact(categories.map((id) => catIdVsName[id] || false ));\r\n            if(typeof selectedCats === 'string'){\r\n                selectedCats = [];\r\n            }\r\n    \r\n            return (\r\n                <PluginDocumentSettingPanel title={ __( 'Post Expirator', 'post-expirator' ) } icon=\"calendar\" initialOpen={ enabled }>\r\n                    <PanelRow>\r\n                        <CheckboxControl\r\n                            label={ __( 'Enable Post Expiration', 'post-expirator' ) }\r\n                            checked={ enabled }\r\n                            onChange={ (value) => { this.setState( { enabled: !enabled, attribute: 'enabled' } ) } }\r\n                        />\r\n                    </PanelRow>\r\n                    { enabled && (\r\n                        <Fragment>\r\n                            <PanelRow>\r\n                                <DateTimePicker\r\n                                    currentDate={ date }\r\n                                    onChange={ ( value ) => this.setState( { date: value, attribute: 'date' } ) }\r\n                                    is12Hour={ true }\r\n                                />\r\n                            </PanelRow>\r\n                            <SelectControl\r\n                                label={ __( 'How to expire', 'post-expirator' ) }\r\n                                value={ expireAction }\r\n                                options={ actionsList }\r\n                                onChange={ (value) => { this.setState( { expireAction: value, attribute: 'action' } ) } }\r\n                            />\r\n                            { expireAction.includes('category') && \r\n                                (\r\n                                    ( isEmpty(keys(categoriesList)) && (\r\n                                        <Fragment>\r\n                                            { __( 'Loading', 'post-expirator' ) + ` (${taxonomy})` }\r\n                                            <Spinner/>\r\n                                        </Fragment>\r\n                                    ) )\r\n                                    ||\r\n                                    (\r\n                                <FormTokenField\r\n                                    label={ __('Expiration Categories', 'post-expirator') + ` (${taxonomy})` }\r\n                                    value={ selectedCats }\r\n                                    suggestions={ Object.keys(categoriesList) }\r\n                                    onChange={ ( value ) => { this.setState( { categories: this.selectCategories(value), attribute: 'category' } ) } }\r\n                                    maxSuggestions={ 10 }\r\n                                />\r\n                                    )\r\n                            ) }\r\n                        </Fragment>\r\n                    ) }\r\n                </PluginDocumentSettingPanel>\r\n            );\r\n        }\r\n\r\n        // what action to take on expiration\r\n        getExpireType(postMeta) {\r\n            let typeNew = postMeta['_expiration-date-type'];\r\n            let typeOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['expireType'];\r\n\r\n            if(typeNew){\r\n                return typeNew;\r\n            }\r\n\r\n            if(typeOld){\r\n                return typeOld;\r\n            }\r\n\r\n            return 'draft';\r\n        }\r\n\r\n        // what categories to add/remove/replace\r\n        getCategories(postMeta) {\r\n            let categoriesNew = postMeta['_expiration-date-categories'] && postMeta['_expiration-date-categories'];\r\n            let categoriesOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['category'];\r\n\r\n            if(typeof categoriesNew === 'object' && categoriesNew.length > 0){\r\n                return categoriesNew;\r\n            }\r\n\r\n            if(categoriesOld && typeof categoriesOld !== 'undefined' && typeof categoriesOld !== 'object'){\r\n                categories = [ categoriesOld ];\r\n            }\r\n\r\n            return categoriesOld;\r\n\r\n        }\r\n\r\n        // fired for the autocomplete\r\n        selectCategories(tokens) {\r\n            const { categoriesList, catIdVsName } = this.state;\r\n\r\n            var hasNoSuggestion = tokens.some(function (token) {\r\n                return typeof token === 'string' && !categoriesList[token];\r\n            });\r\n\r\n            if (hasNoSuggestion) {\r\n                return;\r\n            }\r\n\r\n            var categories = tokens.map(function (token) {\r\n                return typeof token === 'string' ? categoriesList[token] : token;\r\n            })\r\n\r\n            return categories.map( (cat) => cat.id );\r\n        }\r\n\r\n        getDate(date){\r\n            let newDate = new Date();\r\n            newDate.setTime(Date.parse(date));\r\n            newDate.setTime(newDate.getTime() - new Date().getTimezoneOffset() * 60 * 1000);\r\n            return ((newDate.getTime()) / 1000);\r\n        }\r\n\r\n    }\r\n\r\n    registerPlugin( 'postexpirator-sidebar', {\r\n        render: PostExpiratorSidebar\r\n    } );\r\n\r\n\r\n})( window.wp, config );"],"sourceRoot":""}