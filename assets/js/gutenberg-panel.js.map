{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n    const {useEffect, useState} = React;\n    const {addAction, doAction} = wp.hooks;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select,\n        subscribe,\n        dispatch\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const debugLog = (description, message) => {\n        if (console && config.is_debug_enabled) {\n            console.debug('[Future]', description, message);\n        }\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: 0,\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null\n        }\n\n        if (! config || ! config.defaults) {\n            return defaultState;\n        }\n\n        if (config.defaults.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.defaults.expireType) {\n            defaultState.futureAction = config.defaults.expireType;\n        }\n\n        if (config.default_date) {\n            defaultState.futureActionDate = parseInt(config.default_date);\n        } else {\n            defaultState.futureActionDate = new Date().getTime();\n        }\n\n        if (config.defaults.taxonomy) {\n            defaultState.futureActionTaxonomy = config.defaults.taxonomy;\n        }\n\n        if (config.defaults.terms) {\n            defaultState.futureActionTerms = config.defaults.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                // let date = new Date();\n                // let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n                // let wpTimezoneOffset = config.timezone_offset * 60;\n\n                // date.setTime((storedDate + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n                // date.setTime(state.futureActionDate * 1000);\n                //\n                // return date.getTime()/1000;\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getData(state) {\n                return {\n                    futureAction: state.futureAction,\n                    futureActionDate: state.futureActionDate,\n                    futureActionEnabled: state.futureActionEnabled,\n                    futureActionTerms: state.futureActionTerms,\n                    futureActionTaxonomy: state.futureActionTaxonomy\n                }\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const MyPluginDocumentSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n            editPostAttribute('enabled', isChecked);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute('action', value);\n        };\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n\n            setFutureActionDate(date);\n            editPostAttribute('date', value);\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute('terms', value);\n        }\n\n        const getPostId = () => {\n            return select('core/editor').getCurrentPostId();\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = () => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n            setFutureActionEnabled(data.enabled);\n            setFutureAction(data.action);\n            setFutureActionDate(data.date);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                });\n            } else {\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            termsListByName[decodeEntities(term.name)] = term;\n                            termsListById[term.id] = decodeEntities(term.name);\n                        });\n\n                        setTermsListByName(termsListByName);\n                        setTermsListById(termsListById);\n                        setTaxonomyName(decodeEntities(taxAttributes.name));\n                    });\n                });\n            }\n        }\n\n        const editPostAttribute = (name, value) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy\n                }\n            };\n\n            attribute.publishpress_future_action[name] = value;\n\n            editPost(attribute);\n            debugLog('editPostAttribute', attribute);\n        }\n\n\n        const init = () => {\n            fetchFutureActionData();\n            fetchTerms();\n\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n\n            if (futureActionEnabled && isCleanNewPost) {\n                editPostAttribute('enabled', true);\n            }\n        }\n\n        useEffect(init, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow>\n                            <DateTimePicker\n                                currentDate={futureActionDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is_12_hours}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.howToExpire}\n                            value={futureAction}\n                            options={config.actions_options}\n                            onChange={handleActionChange}\n                        />\n                        {futureAction.includes('category') &&\n                            (\n                                (isEmpty(keys(termsListByName)) && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                ))\n                                ||\n                                (\n                                    <FormTokenField\n                                        label={config.strings.expirationCategories + ` (${futureActionTaxonomy})`}\n                                        value={selectedTerms}\n                                        suggestions={Object.keys(termsListByName)}\n                                        onChange={handleTermsChange}\n                                        maxSuggestions={10}\n                                    />\n                                )\n                            )}\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    // Step 3: Connect the component to the Redux store\n    registerPlugin('publishpress-future-action', {\n        render: MyPluginDocumentSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","React","useEffect","useState","hooks","addAction","doAction","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","subscribe","dispatch","apiFetch","debugLog","description","message","console","is_debug_enabled","debug","getDefaultState","defaultState","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","defaults","autoEnable","expireType","default_date","parseInt","Date","getTime","taxonomy","terms","split","map","term","DEFAULT_STATE","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","getData","MyPluginDocumentSettingPanel","mapTermsFromIdToName","mapTermsFromNameToId","id","handleEnabledChange","isChecked","editPostAttribute","handleActionChange","value","handleDateChange","date","handleTermsChange","getPostId","getCurrentPostId","getPostType","getCurrentPostType","fetchFutureActionData","getEditedPostAttribute","enabled","fetchTerms","postType","path","per_page","then","list","forEach","cat","name","strings","category","context","taxAttributes","rest_base","attribute","publishpress_future_action","init","isCleanNewPost","selectedTerms","length","postExpirator","enablePostExpiration","is_12_hours","howToExpire","actions_options","includes","loading","expirationCategories","Object","render","window","postExpiratorPanelConfig"],"sourceRoot":""}