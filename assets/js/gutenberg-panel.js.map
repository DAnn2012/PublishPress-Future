{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/components/BlockEditorFutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/components/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/gutenberg-panel.jsx"],"sourcesContent":["import FutureActionPanel from './FutureActionPanel';\n\nconst BlockEditorFutureActionPanel = (props) => {\n    const { PluginDocumentSettingPanel } = wp.editPost;\n    const { useDispatch, select } = wp.data;\n\n    const { editPost } = useDispatch('core/editor');\n\n    const editPostAttribute = (newAttribute) => {\n        const attribute = {\n            publishpress_future_action: {}\n        };\n\n        // For each property on newAttribute, set the value on attribute\n        for (const [name, value] of Object.entries(newAttribute)) {\n            attribute.publishpress_future_action[name] = value;\n        }\n\n        editPost(attribute);\n    }\n\n    const onChangeData = (attribute, value) => {\n        const store = select(props.storeName);\n\n        const newAttribute = {\n            'enabled': store.getEnabled()\n        }\n\n        if (newAttribute.enabled) {\n            newAttribute['action'] = store.getAction();\n            newAttribute['date'] = store.getDate();\n            newAttribute['terms'] = store.getTerms();\n            newAttribute['taxonomy'] = store.getTaxonomy();\n        }\n\n        editPostAttribute(newAttribute);\n    }\n\n    const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n    return (\n        <PluginDocumentSettingPanel\n            name={'publishpress-future-action-panel'}\n            title={props.strings.panelTitle}\n            icon=\"calendar\"\n            initialOpen={props.postTypeDefaultConfig.autoEnable}\n            className={'post-expirator-panel'}>\n            <FutureActionPanel\n                postType={props.postType}\n                isCleanNewPost={props.isCleanNewPost}\n                actionsSelectOptions={props.actionsSelectOptions}\n                enabled={data.enabled}\n                action={data.action}\n                date={data.date}\n                terms={data.terms}\n                taxonomy={data.taxonomy}\n                onChangeData={onChangeData}\n                is12hours={props.is12hours}\n                startOfWeek={props.startOfWeek}\n                storeName={props.storeName}\n                strings={props.strings} />\n        </PluginDocumentSettingPanel>\n    );\n};\n\nexport default BlockEditorFutureActionPanel;\n","import { compact } from '../utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment, useEffect } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nconst FutureActionPanel = (props) => {\n    const action = useSelect((select) => select(props.storeName).getAction(), []);\n    const date = useSelect((select) => select(props.storeName).getDate(), []);\n    const enabled = useSelect((select) => select(props.storeName).getEnabled(), []);\n    const terms = useSelect((select) => select(props.storeName).getTerms(), []);\n    const taxonomy = useSelect((select) => select(props.storeName).getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select(props.storeName).getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select(props.storeName).getTermsListByName(), []);\n    const termsListById = useSelect((select) => select(props.storeName).getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select(props.storeName).getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch(props.storeName);\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const insertTerm = (term) => {\n        termsListByName[term] = {id: term, count: 0, description: \"\", link: \"\", name: term, slug: term, taxonomy: taxonomy};\n        termsListById[term] = term;\n        setTermsListByName(termsListByName);\n        setTermsListById(termsListById);\n        setTerms([...terms, term]);\n\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            if (termsListByName[term]) {\n                return termsListByName[term].id;\n            }\n\n            insertTerm(term);\n\n            return term;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        setDate(value);\n\n        callOnChangeData('date', value);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate(props.date);\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled || false}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {`${props.strings.loading} (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={termsListByNameKeys}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n\nexport default FutureActionPanel;\n","import { getCurrentTimeAsTimestamp } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n\n    if (props.defaultState.terms && typeof props.defaultState.terms === 'string') {\n        props.defaultState.terms = props.defaultState.terms.split(',').map(term => parseInt(term));\n    }\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? props.defaultState.date : getCurrentTimeAsTimestamp(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore(props.name, {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTimeInSeconds = () => {\n    return normalizeUnixTimeToSeconds(new Date().getTime());\n}\n\nexport const getCurrentTimeAsTimestamp = () => {\n    return formatUnixTimeToTimestamp(getCurrentTimeInSeconds());\n}\n\nexport const formatUnixTimeToTimestamp = (unixTimestamp) => {\n    const date = new Date(\n        normalizeUnixTimeToMilliseconds(unixTimestamp)\n    );\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimestampToUnixTime = (time) => {\n    const date = new Date(time);\n\n    return normalizeUnixTimeToSeconds(date.getTime());\n}\n\nexport const timeIsInSeconds = (time) => {\n    return parseInt(time).toString().length === 10;\n}\n\nexport const normalizeUnixTimeToSeconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time : time / 1000;\n}\n\nexport const normalizeUnixTimeToMilliseconds = (time) => {\n    time = parseInt(time);\n\n    return timeIsInSeconds() ? time * 1000 : time;\n}\n","export const compact = (array) => {\n    if (!array) {\n        return [];\n    }\n\n    if (! Array.isArray(array) && typeof array === 'object') {\n        array = Object.values(array);\n    }\n\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n\nexport const isGutenbergEnabled = () => {\n    return document.body.classList.contains('block-editor-page');\n}\n\nexport const getElementByName = (name) => {\n    return document.getElementsByName(name)[0];\n}\n\nexport const getFieldByName = (name, postId) => {\n    return document.querySelector(`#the-list tr#post-${postId} .column-expirationdate input#future_action_${name}-${postId}`);\n}\n\nexport const getFieldValueByName = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return null;\n    }\n\n    return field.value;\n};\n\nexport const getFieldValueByNameAsArrayOfInt = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field || !field.value) {\n        return [];\n    }\n\n    if (typeof field.value === 'number') {\n        field.value = field.value.toString();\n    }\n\n    return field.value.split(',').map(term => parseInt(term));\n};\n\nexport const getFieldValueByNameAsBool = (name, postId) => {\n    const field = getFieldByName(name, postId);\n\n    if (!field) {\n        return false;\n    }\n\n    return field.value === '1' || field.value === 'true';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from './data';\nimport BlockEditorFutureActionPanel from './components/BlockEditorFutureActionPanel';\n\n(function (wp, config) {\n    const { registerPlugin } = wp.plugins;\n    const storeName = 'publishpress-future/future-action';\n\n    createStore({\n        name: storeName,\n        defaultState: {\n            autoEnable: config.postTypeDefaultConfig.autoEnable,\n            action: config.postTypeDefaultConfig.expireType,\n            date: config.defaultDate,\n            taxonomy: config.postTypeDefaultConfig.taxonomy,\n            terms: config.postTypeDefaultConfig.terms,\n        }\n    });\n\n    const BlockEditorFutureActionPlugin = () => {\n        return (\n            <BlockEditorFutureActionPanel\n                postType={wp.data.select('core/editor').getCurrentPostType()}\n                isCleanNewPost={wp.data.select('core/editor').isCleanNewPost()}\n                actionsSelectOptions={config.actionsSelectOptions}\n                is12hours={config.is12hours}\n                startOfWeek={config.startOfWeek}\n                storeName={storeName}\n                strings={config.strings}\n                postTypeDefaultConfig={config.postTypeDefaultConfig} />\n        );\n    }\n\n    registerPlugin('publishpress-future-action', {\n        render: BlockEditorFutureActionPlugin\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["BlockEditorFutureActionPanel","props","PluginDocumentSettingPanel","wp","editPost","data","useDispatch","select","editPostAttribute","newAttribute","attribute","publishpress_future_action","Object","entries","name","value","onChangeData","store","storeName","getEnabled","enabled","getAction","getDate","getTerms","getTaxonomy","getEditedPostAttribute","strings","panelTitle","postTypeDefaultConfig","autoEnable","postType","isCleanNewPost","actionsSelectOptions","action","date","terms","taxonomy","is12hours","startOfWeek","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","useEffect","decodeEntities","htmlEntities","addQueryArgs","url","useSelect","apiFetch","FutureActionPanel","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","insertTerm","id","count","description","link","slug","mapTermsListByName","callOnChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","handleTermsChange","path","per_page","then","list","forEach","cat","category","response","parseInt","context","taxonomyAttributes","rest_base","selectedTerms","length","termsListByNameKeys","keys","enablePostExpiration","String","includes","loading","noTaxonomyFound","noTermsFound","createStore","register","createReduxStore","defaultState","split","reducer","state","type","actions","selectors","getCurrentTimeInSeconds","normalizeUnixTimeToSeconds","Date","getTime","getCurrentTimeAsTimestamp","formatUnixTimeToTimestamp","unixTimestamp","normalizeUnixTimeToMilliseconds","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimestampToUnixTime","time","timeIsInSeconds","toString","compact","array","Array","isArray","values","filter","item","undefined","debugLogFactory","config","message","console","isDebugEnabled","debug","isGutenbergEnabled","document","body","classList","contains","getElementByName","getElementsByName","getFieldByName","postId","querySelector","getFieldValueByName","field","getFieldValueByNameAsArrayOfInt","getFieldValueByNameAsBool","registerPlugin","plugins","expireType","defaultDate","BlockEditorFutureActionPlugin","getCurrentPostType","render","window","postExpiratorPanelConfig"],"sourceRoot":""}