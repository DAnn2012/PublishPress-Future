{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/FutureActionPanel.jsx","webpack://post-expirator/./assets/jsx/data.jsx","webpack://post-expirator/./assets/jsx/time.jsx","webpack://post-expirator/./assets/jsx/utils.jsx","webpack://post-expirator/webpack/bootstrap","webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["import { compact } from './utils';\n\nconst { PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner } = wp.components;\nconst { Fragment } = wp.element;\nconst { decodeEntities } = wp.htmlEntities;\nconst { useEffect } = React;\nconst { addQueryArgs } = wp.url;\nconst {\n    useSelect,\n    useDispatch\n} = wp.data;\nconst { apiFetch } = wp;\n\nexport const FutureActionPanel = (props) => {\n    const action = useSelect((select) => select('publishpress-future/future-action').getAction(), []);\n    const date = useSelect((select) => select('publishpress-future/future-action').getDate(), []);\n    const enabled = useSelect((select) => select('publishpress-future/future-action').getEnabled(), []);\n    const terms = useSelect((select) => select('publishpress-future/future-action').getTerms(), []);\n    const taxonomy = useSelect((select) => select('publishpress-future/future-action').getTaxonomy(), []);\n    const taxonomyName = useSelect((select) => select('publishpress-future/future-action').getTaxonomyName(), []);\n    const termsListByName = useSelect((select) => select('publishpress-future/future-action').getTermsListByName(), []);\n    const termsListById = useSelect((select) => select('publishpress-future/future-action').getTermsListById(), []);\n    const isFetchingTerms = useSelect((select) => select('publishpress-future/future-action').getIsFetchingTerms(), []);\n\n    const {\n        setAction,\n        setDate,\n        setEnabled,\n        setTerms,\n        setTaxonomy,\n        setTermsListByName,\n        setTermsListById,\n        setTaxonomyName,\n        setIsFetchingTerms\n    } = useDispatch('publishpress-future/future-action');\n\n    const mapTermsListById = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListById[term];\n        });\n    }\n\n    const mapTermsListByName = (terms) => {\n        if (typeof terms !== 'object' || terms === null) {\n            return {};\n        }\n\n        return terms.map((term) => {\n            return termsListByName[term].id;\n        });\n    }\n\n    const callOnChangeData = (attribute, value) => {\n        if (typeof props.onChangeData === 'function') {\n            props.onChangeData(attribute, value);\n        }\n    }\n\n    const handleEnabledChange = (isChecked) => {\n        setEnabled(isChecked);\n\n        if (isChecked) {\n            setAction(props.action);\n            setDate(props.date);\n            setTerms(props.terms);\n            setTaxonomy(props.taxonomy);\n\n            fetchTerms();\n        }\n\n        callOnChangeData('enabled', isChecked);\n    }\n\n    const handleActionChange = (value) => {\n        setAction(value);\n\n        callOnChangeData('action', value);\n    }\n\n    const handleDateChange = (value) => {\n        console.log('handleDateChange', value);\n        const date = new Date(value).getTime();\n\n        setDate(date);\n\n        callOnChangeData('date', date);\n    }\n\n    const handleTermsChange = (value) => {\n        value = mapTermsListByName(value);\n\n        setTerms(value);\n\n        callOnChangeData('terms', value);\n    }\n\n    const fetchTerms = () => {\n        let termsListByName = {};\n        let termsListById = {};\n\n        setIsFetchingTerms(true);\n\n        if ((!taxonomy && props.postType === 'post') || taxonomy === 'category') {\n            apiFetch({\n                path: addQueryArgs('wp/v2/categories', { per_page: -1 }),\n            }).then((list) => {\n                list.forEach(cat => {\n                    termsListByName[cat.name] = cat;\n                    termsListById[cat.id] = cat.name;\n                });\n\n                setTermsListByName(termsListByName);\n                setTermsListById(termsListById);\n                setTaxonomyName(props.strings.category);\n                setIsFetchingTerms(false);\n            });\n        } else {\n            apiFetch({\n                path: addQueryArgs(`publishpress-future/v1/taxonomies/` + props.postType),\n            }).then((response) => {\n                if (parseInt(response.count) > 0) {\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, { context: 'edit', per_page: -1 }),\n                    }).then((taxonomyAttributes) => {\n                        // fetch all terms\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/${taxonomyAttributes.rest_base}`, { context: 'edit', per_page: -1 }),\n                        }).then((terms) => {\n                            terms.forEach(term => {\n                                termsListByName[decodeEntities(term.name)] = term;\n                                termsListById[term.id] = decodeEntities(term.name);\n                            });\n\n                            setTermsListByName(termsListByName);\n                            setTermsListById(termsListById);\n                            setTaxonomyName(decodeEntities(taxonomyAttributes.name));\n                            setIsFetchingTerms(false);\n                        });\n                    });\n                }\n            });\n        }\n    }\n\n    useEffect(() => {\n        setEnabled(props.enabled);\n        setAction(props.action);\n        setDate((new Date(props.date)).getTime());\n        setTerms(props.terms);\n        setTaxonomy(props.taxonomy);\n\n        // We need to get the value directly from the store because the value from the state is not updated yet\n        if (props.enabled) {\n            if (props.isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n\n            fetchTerms();\n        }\n    }, []);\n\n    let selectedTerms = [];\n    if (terms && terms.length > 0 && termsListById) {\n        selectedTerms = compact(mapTermsListById(terms));\n\n        if (typeof selectedTerms === 'string') {\n            selectedTerms = [];\n        }\n    }\n\n    let termsListByNameKeys = [];\n    if (typeof termsListByName === 'object' && termsListByName !== null) {\n        termsListByNameKeys = Object.keys(termsListByName);\n    }\n\n    // TODO: Why is this different on block editor and classic editor?\n    console.log('currentDate', date);\n\n    return (\n        <Fragment>\n            <PanelRow>\n                <CheckboxControl\n                    label={props.strings.enablePostExpiration}\n                    checked={enabled}\n                    onChange={handleEnabledChange}\n                />\n            </PanelRow>\n            {enabled && (\n                <Fragment>\n                    <PanelRow className={'future-action-date-panel'}>\n                        <DateTimePicker\n                            currentDate={date * 1000}\n                            onChange={handleDateChange}\n                            __nextRemoveHelpButton={true}\n                            is12Hour={props.is12hours}\n                            startOfWeek={props.startOfWeek}\n                        />\n                    </PanelRow>\n                    <SelectControl\n                        label={props.strings.action}\n                        value={action}\n                        options={props.actionsSelectOptions}\n                        onChange={handleActionChange}\n                    />\n\n                    {\n                        String(action).includes('category') && (\n                            isFetchingTerms && (\n                                <Fragment>\n                                    {props.strings.loading + ` (${taxonomy})`}\n                                    <Spinner />\n                                </Fragment>\n                            )\n                            || (!taxonomy && (\n                                <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTaxonomyFound}</p>\n                            )\n                                || (\n                                    termsListByNameKeys.length === 0 && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {props.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={taxonomyName}\n                                            value={selectedTerms}\n                                            suggestions={Object.keys(termsListByName)}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        )\n                    }\n                </Fragment>\n            )}\n        </Fragment>\n    );\n};\n","import { getCurrentTime } from './time';\n\nexport const createStore = (props) => {\n    const {\n        register,\n        createReduxStore,\n    } = wp.data;\n\n    let defaultState = {\n        action: props.defaultState.action,\n        date: props.defaultState.date ? parseInt(props.defaultState.date) : getCurrentTime(),\n        enabled: props.defaultState.autoEnable,\n        terms: props.defaultState.terms ? props.defaultState.terms.split(',').map(term => parseInt(term)) : [],\n        taxonomy: props.defaultState.taxonomy ? props.defaultState.taxonomy : null,\n        termsListByName: null,\n        termsListById: null,\n        taxonomyName: null,\n        isFetchingTerms: false,\n    }\n\n    const store = createReduxStore('publishpress-future/future-action', {\n        reducer(state = defaultState, action) {\n            switch (action.type) {\n                case 'SET_ACTION':\n                    return {\n                        ...state,\n                        action: action.action,\n                    };\n                case 'SET_DATE':\n                    return {\n                        ...state,\n                        date: action.date,\n                    }\n                case 'SET_ENABLED':\n                    return {\n                        ...state,\n                        enabled: action.enabled,\n                    }\n                case 'SET_TERMS':\n                    return {\n                        ...state,\n                        terms: action.terms,\n                    }\n                case 'SET_TAXONOMY':\n                    return {\n                        ...state,\n                        taxonomy: action.taxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setAction(action) {\n                return {\n                    type: 'SET_ACTION',\n                    action: action\n                };\n            },\n            setDate(date) {\n                return {\n                    type: 'SET_DATE',\n                    date: date\n                };\n            },\n            setEnabled(enabled) {\n                return {\n                    type: 'SET_ENABLED',\n                    enabled: enabled\n                };\n            },\n            setTerms(terms) {\n                return {\n                    type: 'SET_TERMS',\n                    terms: terms\n                };\n            },\n            setTaxonomy(taxonomy) {\n                return {\n                    type: 'SET_TAXONOMY',\n                    taxonomy: taxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getAction(state) {\n                return state.action;\n            },\n            getDate(state) {\n                return state.date;\n            },\n            getEnabled(state) {\n                return state.enabled;\n            },\n            getTerms(state) {\n                return state.terms;\n            },\n            getTaxonomy(state) {\n                return state.taxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    return store;\n}\n","export const getCurrentTime = () => {\n    return (new Date()).getTime()/1000;\n}\n\nexport const formatUnixTimestamp = (unixTimestamp) => {\n    const date = new Date(unixTimestamp * 1000); // Convert to milliseconds by multiplying by 1000\n\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const formatTimeToUnixTimestamp = (time) => {\n    const date = new Date(time);\n\n    return date.getTime()/1000;\n}\n","export const compact = (array) => {\n    return array.filter((item) => {\n        return item !== null && item !== undefined && item !== '';\n    });\n}\n\nexport const debugLogFactory = (config) => {\n    return (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createStore } from '../data';\nimport { FutureActionPanel } from '../FutureActionPanel';\nimport { formatTimeToUnixTimestamp } from '../time';\n\n(function (wp, config) {\n    const { registerPlugin } = wp.plugins;\n\n    createStore({\n        defaultState: {\n            autoEnable: config.postTypeDefaultConfig.autoEnable,\n            action: config.postTypeDefaultConfig.expireType,\n            date: config.defaultDate,\n            taxonomy: config.postTypeDefaultConfig.taxonomy,\n            ters: config.postTypeDefaultConfig.terms,\n        }\n    });\n\n    const GutenbergFutureActionPanel = () => {\n        const { PluginDocumentSettingPanel } = wp.editPost;\n        const { useDispatch, select } = wp.data;\n        const { editPost } = useDispatch('core/editor');\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    browser_timezone_offset: new Date().getTimezoneOffset()\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n        }\n\n        const onChangeData = (attribute, value) => {\n            const store = select('publishpress-future/future-action');\n\n            const newAttribute = {\n                'enabled': store.getEnabled()\n            }\n\n            if (data.enabled) {\n                newAttribute['action'] = store.getAction();\n                newAttribute['date'] = store.getDate();\n                newAttribute['terms'] = store.getTerms();\n                newAttribute['taxonomy'] = store.getTaxonomy();\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n        console.log('date', data.date, formatTimeToUnixTimestamp(data.date));\n\n        return (\n            <PluginDocumentSettingPanel\n                name={'publishpress-future-action-panel'}\n                title={config.strings.panelTitle}\n                icon=\"calendar\"\n                initialOpen={config.postTypeDefaultConfig.autoEnable}\n                className={'post-expirator-panel'}>\n                <FutureActionPanel\n                    postType={select('core/editor').getCurrentPostType()}\n                    isCleanNewPost={select('core/editor').isCleanNewPost()}\n                    actionsSelectOptions={config.actionsSelectOptions}\n                    enabled={data.enabled}\n                    action={data.action}\n                    date={data.date}\n                    terms={data.terms}\n                    taxonomy={data.taxonomy}\n                    onChangeData={onChangeData}\n                    is12hours={config.is12hours}\n                    startOfWeek={config.startOfWeek}\n\n                    strings={config.strings} />\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    registerPlugin('publishpress-future-action', {\n        render: GutenbergFutureActionPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","React","useEffect","addQueryArgs","url","data","useSelect","useDispatch","apiFetch","FutureActionPanel","props","action","select","getAction","date","getDate","enabled","getEnabled","terms","getTerms","taxonomy","getTaxonomy","taxonomyName","getTaxonomyName","termsListByName","getTermsListByName","termsListById","getTermsListById","isFetchingTerms","getIsFetchingTerms","setAction","setDate","setEnabled","setTerms","setTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","mapTermsListById","map","term","mapTermsListByName","id","callOnChangeData","attribute","value","onChangeData","handleEnabledChange","isChecked","fetchTerms","handleActionChange","handleDateChange","console","log","Date","getTime","handleTermsChange","postType","path","per_page","then","list","forEach","cat","name","strings","category","response","parseInt","count","context","taxonomyAttributes","rest_base","isCleanNewPost","selectedTerms","length","termsListByNameKeys","Object","keys","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","createStore","register","createReduxStore","defaultState","autoEnable","split","store","reducer","state","type","actions","selectors","getCurrentTime","formatUnixTimestamp","unixTimestamp","year","getFullYear","month","getMonth","slice","day","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatTimeToUnixTimestamp","time","compact","array","filter","item","undefined","debugLogFactory","config","description","message","isDebugEnabled","debug","registerPlugin","plugins","postTypeDefaultConfig","expireType","defaultDate","ters","GutenbergFutureActionPanel","PluginDocumentSettingPanel","editPost","editPostAttribute","newAttribute","publishpress_future_action","browser_timezone_offset","getTimezoneOffset","entries","getEditedPostAttribute","panelTitle","getCurrentPostType","render","window","postExpiratorPanelConfig"],"sourceRoot":""}