{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {useEffect} = React;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const compact = (array) => {\n        return array.filter((item) => {\n            return item !== null && item !== undefined && item !== '';\n        });\n    }\n\n    const debugLog = (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n\n    const getCurrentTime = () => {\n        return (new Date()).getTime()/1000;\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: getCurrentTime(),\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null,\n            isFetchingTerms: false,\n        }\n\n        if (! config || ! config.postTypeDefaultConfig) {\n            return defaultState;\n        }\n\n        if (config.postTypeDefaultConfig.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.postTypeDefaultConfig.expireType) {\n            defaultState.futureAction = config.postTypeDefaultConfig.expireType;\n        }\n\n        if (config.defaultDate) {\n            defaultState.futureActionDate = parseInt(config.defaultDate);\n        } else {\n            defaultState.futureActionDate = getCurrentTime();\n        }\n\n        if (config.postTypeDefaultConfig.taxonomy) {\n            defaultState.futureActionTaxonomy = config.postTypeDefaultConfig.taxonomy;\n        }\n\n        if (config.postTypeDefaultConfig.terms) {\n            defaultState.futureActionTerms = config.postTypeDefaultConfig.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const FutureActionSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n        const isFetchingTerms = useSelect((select) => select('publishpress-future/store').getIsFetchingTerms(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName,\n            setIsFetchingTerms\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n\n            const newAttribute = {\n                'enabled': isChecked\n            }\n\n            // User default values to other fields\n            if (isChecked) {\n                setFutureAction(DEFAULT_STATE.futureAction);\n                setFutureActionDate(DEFAULT_STATE.futureActionDate);\n                setFutureActionTerms(DEFAULT_STATE.futureActionTerms);\n                setFutureActionTaxonomy(DEFAULT_STATE.futureActionTaxonomy);\n\n                newAttribute['action'] = DEFAULT_STATE.futureAction;\n                newAttribute['date'] = DEFAULT_STATE.futureActionDate;\n                newAttribute['terms'] = DEFAULT_STATE.futureActionTerms;\n                newAttribute['taxonomy'] = DEFAULT_STATE.futureActionTaxonomy;\n\n                fetchTerms();\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute({'action': value});\n        }\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n\n            setFutureActionDate(date);\n            editPostAttribute({'date': date});\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute({'terms': value});\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = (callback) => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n            debugLog('fetchFutureActionData', data);\n\n            setFutureActionEnabled(data.enabled).then(callback);\n            setFutureAction(data.action);\n            setFutureActionDate((new Date(data.date)).getTime()/1000);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            debugLog('fetchTerms', 'Fetching terms...');\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            setIsFetchingTerms(true);\n\n            debugLog('futureActionTaxonomy', futureActionTaxonomy);\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                debugLog('fetchTerms', 'Fetching categories...');\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    debugLog('list', list);\n\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                    setIsFetchingTerms(false);\n                });\n            } else {\n                debugLog('fetchTerms', 'Fetching taxonomies...');\n                apiFetch({\n                    path: addQueryArgs(`publishpress-future/v1/taxonomies/` + postType),\n                }).then((response) => {\n                    debugLog('response', response);\n\n                    if (parseInt(response.count) > 0) {\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                        }).then((taxAttributes) => {\n                            debugLog('taxAttributes', taxAttributes);\n                            // fetch all terms\n                            apiFetch({\n                                path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                            }).then((terms) => {\n                                debugLog('terms', terms);\n                                terms.forEach(term => {\n                                    termsListByName[decodeEntities(term.name)] = term;\n                                    termsListById[term.id] = decodeEntities(term.name);\n                                });\n\n                                setTermsListByName(termsListByName);\n                                setTermsListById(termsListById);\n                                setTaxonomyName(decodeEntities(taxAttributes.name));\n                                setIsFetchingTerms(false);\n                            });\n                        });\n                    } else {\n                        debugLog('fetchTerms', 'No taxonomies found');\n                    }\n                });\n            }\n        }\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy,\n                    browser_timezone_offset: new Date().getTimezoneOffset()\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n            debugLog('editPostAttribute', newAttribute, attribute);\n        }\n\n        useEffect(() => {\n            fetchFutureActionData();\n\n            // We need to get the value directly from the store because the value from the state is not updated yet\n            const enabled = select('publishpress-future/store').getFutureActionEnabled();\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n\n            debugLog('enabled', enabled);\n            debugLog('isCleanNewPost', isCleanNewPost);\n\n            if (enabled) {\n                if (isCleanNewPost) {\n                    handleEnabledChange(true);\n                }\n\n                fetchTerms();\n            }\n        }, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        const currentDate = futureActionDate;\n        debugLog('futureActionDate', futureActionDate);\n        debugLog('currentDate', currentDate);\n\n        let termsListByNameKeys = [];\n        if (typeof termsListByName === 'object' && termsListByName !== null) {\n            termsListByNameKeys = Object.keys(termsListByName);\n        }\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.panelTitle} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow className={'future-action-date-panel'}>\n                            <DateTimePicker\n                                currentDate={currentDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is12hours}\n                                startOfWeek={config.startOfWeek}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.action}\n                            value={futureAction}\n                            options={config.actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n\n                        {\n                            String(futureAction).includes('category') && (\n                                isFetchingTerms && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                )\n                                || (! futureActionTaxonomy && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTaxonomyFound}</p>\n                                    )\n                                    || (\n                                        termsListByNameKeys.length === 0 && (\n                                            <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTermsFound}</p>\n                                        )\n                                        || (\n                                            <FormTokenField\n                                                label={config.taxonomyName}\n                                                value={selectedTerms}\n                                                suggestions={Object.keys(termsListByName)}\n                                                onChange={handleTermsChange}\n                                                maxSuggestions={10}\n                                            />\n                                        )\n                                    )\n                                )\n                            )\n                        }\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    registerPlugin('publishpress-future-action', {\n        render: FutureActionSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","React","useEffect","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","apiFetch","compact","array","filter","item","undefined","debugLog","description","message","console","isDebugEnabled","debug","getCurrentTime","Date","getTime","getDefaultState","defaultState","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","isFetchingTerms","postTypeDefaultConfig","autoEnable","expireType","defaultDate","parseInt","taxonomy","terms","split","map","term","DEFAULT_STATE","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","getIsFetchingTerms","FutureActionSettingPanel","mapTermsFromIdToName","mapTermsFromNameToId","id","handleEnabledChange","isChecked","newAttribute","fetchTerms","editPostAttribute","handleActionChange","value","handleDateChange","date","handleTermsChange","getPostType","getCurrentPostType","fetchFutureActionData","callback","getEditedPostAttribute","enabled","then","postType","path","per_page","list","forEach","cat","name","strings","category","response","count","context","taxAttributes","rest_base","attribute","publishpress_future_action","browser_timezone_offset","getTimezoneOffset","Object","entries","isCleanNewPost","selectedTerms","length","currentDate","termsListByNameKeys","keys","panelTitle","enablePostExpiration","is12hours","startOfWeek","actionsSelectOptions","String","includes","loading","noTaxonomyFound","noTermsFound","render","window","postExpiratorPanelConfig"],"sourceRoot":""}