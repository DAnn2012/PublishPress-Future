{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment, Component} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n\n    class PostExpiratorSidebar extends Component {\n        constructor() {\n            super(...arguments);\n\n            this.state = {\n                categoriesList: [],\n                catIdVsName: [],\n            }\n\n            wp.data.subscribe(this.listenToPostSave.bind(this));\n            wp.hooks.addAction('after_save_post', 'publishpress-future', () => {\n                console.log('getExpirationEnabled', this.getExpirationEnabled());\n                this.saveCurrentPostData()\n            });\n        }\n\n        listenToPostSave() {\n            // Get the current post ID\n            const postId = this.getPostId();\n\n            const isSavingPost = this.getIsSavingPost();\n            const itemKey = 'ppfuture-expiration-' + postId + '-isSavingPost';\n\n            if (isSavingPost) {\n                sessionStorage.setItem(itemKey, '1');\n            }\n\n            if (!isSavingPost) {\n                let hasSavingRegistered = sessionStorage.getItem(itemKey) === '1';\n\n                if (hasSavingRegistered) {\n                    sessionStorage.removeItem(itemKey);\n                    wp.hooks.doAction('after_save_post', 'publishpress-future');\n                }\n            }\n        }\n\n        getPostType() {\n            return wp.data.select('core/editor').getCurrentPostType();\n        }\n\n        getPostId() {\n            return wp.data.select('core/editor').getCurrentPostId();\n        }\n\n        getIsSavingPost() {\n            return wp.data.select('core/editor').isSavingPost() || wp.data.select('core/editor').isAutosavingPost();\n        }\n\n        editPostAttribute(name, value) {\n            let attribute = {};\n            attribute[name] = value;\n\n            wp.data.dispatch('core/editor').editPost(attribute);\n        }\n\n        getEditedPostAttribute(name) {\n            return wp.data.select(\"core/editor\").getEditedPostAttribute(name);\n        }\n\n        fetchExpirationDataFromApi() {\n            return wp.apiFetch({path: 'publishpress-future/v1/post-expiration/' + this.getPostId()}).then((data) => {\n                // this.editPostAttribute('expirationEnabled', data.enabled);\n                // this.editPostAttribute('expirationAction', data.expireType);\n                // this.editPostAttribute('expirationDate', data.date);\n                // this.editPostAttribute('expirationTerms', data.category);\n                // this.editPostAttribute('expirationTaxonomy', data.categoryTaxonomy);\n\n                this.setState({\n                    expirationEnabled: data.enabled,\n                    expirationAction: data.expireType,\n                    expirationDate: data.date,\n                    expirationTerms: data.category,\n                    expirationTaxonomy: data.categoryTaxonomy\n                });\n\n                console.log('API return', data);\n            });\n        }\n\n        saveCurrentPostData() {\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms} = this.state;\n            let data;\n\n            console.log(this.state);\n\n            if (!expirationEnabled) {\n                data = {'enabled': false, 'date': 0, 'action': '', 'terms': []};\n            } else {\n                data = {\n                    enabled: expirationEnabled,\n                    date: expirationDate,\n                    action: expirationAction,\n                    terms: expirationTerms,\n                };\n            }\n\n            wp.apiFetch({\n                path: 'publishpress-future/v1/post-expiration/' + this.getPostId(),\n                method: 'POST',\n                data: data,\n            }).then((data) => {\n                console.log('Post expiration data saved.');\n                console.log(data);\n            });\n        }\n\n        componentWillMount() {\n            this.fetchExpirationDataFromApi().then(this.initialize.bind(this));\n        }\n\n        initialize() {\n            const postType = this.getPostType();\n\n            const expirationEnabled = this.getExpirationEnabled();\n            const expirationAction = this.getExpirationAction();\n            const expirationTerms = this.getExpirationTerms();\n            const expirationDate = this.getExpirationDate();\n            const expirationTaxonomy = this.getExpirationTaxonomy();\n\n            console.log('Initialized', {\n                enabled: expirationEnabled,\n                date: expirationDate,\n                expirationAction: expirationAction,\n                categories: expirationTerms,\n                taxonomy: expirationTaxonomy,\n            });\n\n            let categoriesList = [];\n            let catIdVsName = [];\n\n            if ((!expirationTaxonomy && postType === 'post') || expirationTaxonomy === 'category') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        categoriesList[cat.name] = cat;\n                        catIdVsName[cat.id] = cat.name;\n                    });\n                    this.setState({\n                        categoriesList: categoriesList,\n                        catIdVsName: catIdVsName,\n                        taxonomy: config.strings.category\n                    });\n                });\n            } else {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs(`wp/v2/taxonomies/${expirationTaxonomy}`, {context: 'edit'}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    wp.apiFetch({\n                        path: wp.url.addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit'}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            categoriesList[decodeEntities(term.name)] = term;\n                            catIdVsName[term.id] = decodeEntities(term.name);\n                        });\n                        this.setState({\n                            categoriesList: categoriesList,\n                            catIdVsName: catIdVsName,\n                            taxonomy: decodeEntities(taxAttributes.name)\n                        });\n                    });\n                });\n            }\n        }\n\n        componentDidUpdate() {\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms, attribute} = this.state;\n            \n            switch (attribute) {\n                case 'enabled':\n                    this.editPostAttribute('expirationEnabled', expirationEnabled);\n                    break;\n\n                case 'date':\n                    this.editPostAttribute('expirationDate', expirationDate);\n                    break;\n\n                case 'action':\n                    this.editPostAttribute('expirationAction', expirationAction);\n                    if (!expirationAction.includes('category')) {\n                        this.editPostAttribute('expirationTerms', []);\n                    }\n                    break;\n                case 'category':\n                    this.editPostAttribute('expirationTerms', expirationTerms);\n                    break;\n            }\n        }\n\n        getExpirationEnabled() {\n            return this.getEditedPostAttribute('expirationEnabled') == true;\n        }\n\n        getExpirationDate() {\n            let storedDate = parseInt(this.getEditedPostAttribute('expirationDate'));\n\n            if (! storedDate) {\n                if (config.default_date) {\n                    storedDate = parseInt(config.default_date);\n                } else {\n                    storedDate = new Date().getTime();\n                }\n            }\n\n            let date = new Date();\n            // let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n            // let wpTimezoneOffset = config.timezone_offset * 60;\n\n            // date.setTime((storedDate + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n            date.setTime(storedDate * 1000);\n\n            return date.getTime()/1000;\n        }\n\n        // what action to take on expiration\n        getExpirationAction() {\n            let expirationAction = this.getEditedPostAttribute('expirationAction');\n\n            if (expirationAction) {\n                return expirationAction;\n            }\n\n            if (config && config.defaults && config.defaults.expireType) {\n                return config.defaults.expireType;\n            }\n\n            return 'draft';\n        }\n\n        arrayIsEmpty(obj) {\n            return !obj || obj.length === 0 || obj[0] === '';\n        }\n\n        // what categories to add/remove/replace\n        getExpirationTerms() {\n            let categories = this.getEditedPostAttribute('expirationTerms', true);\n\n            let defaultCategories = config.defaults.terms ? config.defaults.terms.split(',') : [];\n\n            if (this.arrayIsEmpty(categories)) {\n                return defaultCategories;\n            }\n\n            if (categories && typeof categories !== 'undefined' && typeof categories !== 'object') {\n                return [categories];\n            }\n\n            return categories;\n        }\n\n        getExpirationTaxonomy() {\n            let taxonomy = this.getEditedPostAttribute('expirationTaxonomy');\n\n            if (taxonomy) {\n                return taxonomy;\n            }\n\n            if (config && config.defaults && config.defaults.taxonomy) {\n                return config.defaults.taxonomy;\n            }\n\n            return 'category';\n        }\n\n        // fired for the autocomplete\n        selectCategories(tokens) {\n            const {categoriesList, catIdVsName} = this.state;\n\n            var hasNoSuggestion = tokens.some(function (token) {\n                return typeof token === 'string' && !categoriesList[token];\n            });\n\n            if (hasNoSuggestion) {\n                return;\n            }\n\n            var categories = tokens.map(function (token) {\n                return typeof token === 'string' ? categoriesList[token] : token;\n            })\n\n            return categories.map((cat) => cat.id);\n        }\n\n        onChangeEnabled(value) {\n            this.setState({expirationEnabled: value, attribute: 'enabled'})\n            this.editPostAttribute('expirationEnabled', value);\n            console.log(value);\n        }\n\n        onChangeDate(value) {\n            const date = new Date(value).getTime()/1000;\n            this.setState({expirationDate: date, attribute: 'date'});\n            this.editPostAttribute('expirationDate', date);\n            console.log('New date', date, new Date(date * 1000));\n            console.log('Getdate', this.getExpirationDate());\n        }\n\n        onChangeAction(value) {\n            this.setState({expirationAction: value, attribute: 'action'})\n            this.editPostAttribute('expirationAction', value);\n        }\n\n        onChangeTerms(value) {\n            this.setState({\n                expirationTerms: this.selectCategories(value),\n                attribute: 'category'\n            });\n            this.editPostAttribute('expirationTerms', value);\n        }\n\n        render() {\n            const {categoriesList, catIdVsName} = this.state;\n            const {expirationEnabled, expirationDate, expirationAction, expirationTerms, expirationTaxonomy} = this.state;\n\n            let selectedCats = expirationTerms && compact(expirationTerms.map((id) => catIdVsName[id] || false));\n            if (typeof selectedCats === 'string') {\n                selectedCats = [];\n            }\n\n            return (\n                <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                            initialOpen={expirationEnabled} className={'post-expirator-panel'}>\n                    <PanelRow>\n                        <CheckboxControl\n                            label={config.strings.enablePostExpiration}\n                            checked={expirationEnabled}\n                            onChange={this.onChangeEnabled.bind(this)}\n                        />\n                    </PanelRow>\n                    {expirationEnabled && (\n                        <Fragment>\n                            <PanelRow>\n                                <DateTimePicker\n                                    currentDate={expirationDate*1000}\n                                    onChange={this.onChangeDate.bind(this)}\n                                    is12Hour={config.is_12_hours}\n                                />\n                            </PanelRow>\n                            <SelectControl\n                                label={config.strings.howToExpire}\n                                value={expirationAction}\n                                options={config.actions_options}\n                                onChange={this.onChangeAction.bind(this)}\n                            />\n                            {expirationAction.includes('category') &&\n                                (\n                                    (isEmpty(keys(categoriesList)) && (\n                                        <Fragment>\n                                            {config.strings.loading + ` (${expirationTaxonomy})`}\n                                            <Spinner/>\n                                        </Fragment>\n                                    ))\n                                    ||\n                                    (\n                                        <FormTokenField\n                                            label={config.strings.expirationCategories + ` (${expirationTaxonomy})`}\n                                            value={selectedCats}\n                                            suggestions={Object.keys(categoriesList)}\n                                            onChange={this.onChangeTerms.bind(this)}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )}\n                        </Fragment>\n                    )}\n                </PluginDocumentSettingPanel>\n            );\n        }\n    }\n\n    registerPlugin('postexpirator-sidebar', {\n        render: PostExpiratorSidebar\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","Component","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","PostExpiratorSidebar","arguments","state","categoriesList","catIdVsName","data","subscribe","listenToPostSave","bind","hooks","addAction","console","log","getExpirationEnabled","saveCurrentPostData","postId","getPostId","isSavingPost","getIsSavingPost","itemKey","sessionStorage","setItem","hasSavingRegistered","getItem","removeItem","doAction","select","getCurrentPostType","getCurrentPostId","isAutosavingPost","name","value","attribute","dispatch","getEditedPostAttribute","apiFetch","path","then","setState","expirationEnabled","enabled","expirationAction","expireType","expirationDate","date","expirationTerms","category","expirationTaxonomy","categoryTaxonomy","action","terms","method","fetchExpirationDataFromApi","initialize","postType","getPostType","getExpirationAction","getExpirationTerms","getExpirationDate","getExpirationTaxonomy","categories","taxonomy","url","addQueryArgs","per_page","list","forEach","cat","id","strings","context","taxAttributes","rest_base","term","editPostAttribute","includes","storedDate","parseInt","default_date","Date","getTime","setTime","defaults","obj","length","defaultCategories","split","arrayIsEmpty","tokens","hasNoSuggestion","some","token","map","selectCategories","selectedCats","postExpirator","enablePostExpiration","onChangeEnabled","onChangeDate","is_12_hours","howToExpire","actions_options","onChangeAction","loading","expirationCategories","Object","onChangeTerms","render","window","postExpiratorPanelConfig"],"sourceRoot":""}