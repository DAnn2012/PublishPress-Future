{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n    const {useEffect} = React;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const debugLog = (description, ...message) => {\n        if (console && config.is_debug_enabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: 0,\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null\n        }\n\n        if (! config || ! config.defaults) {\n            return defaultState;\n        }\n\n        if (config.defaults.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.defaults.expireType) {\n            defaultState.futureAction = config.defaults.expireType;\n        }\n\n        if (config.default_date) {\n            defaultState.futureActionDate = parseInt(config.default_date);\n        } else {\n            defaultState.futureActionDate = new Date().getTime();\n        }\n\n        if (config.defaults.taxonomy) {\n            defaultState.futureActionTaxonomy = config.defaults.taxonomy;\n        }\n\n        if (config.defaults.terms) {\n            defaultState.futureActionTerms = config.defaults.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                // let date = new Date();\n                // let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n                // let wpTimezoneOffset = config.timezone_offset * 60;\n\n                // date.setTime((storedDate + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n                // date.setTime(state.futureActionDate * 1000);\n                //\n                // return date.getTime()/1000;\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const MyPluginDocumentSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n\n            const newAttribute = {\n                'enabled': isChecked\n            }\n\n            // User default values to other fields\n            if (isChecked) {\n                setFutureAction(DEFAULT_STATE.futureAction);\n                setFutureActionDate(DEFAULT_STATE.futureActionDate);\n                setFutureActionTerms(DEFAULT_STATE.futureActionTerms);\n                setFutureActionTaxonomy(DEFAULT_STATE.futureActionTaxonomy);\n\n                newAttribute['action'] = DEFAULT_STATE.futureAction;\n                newAttribute['date'] = DEFAULT_STATE.futureActionDate;\n                newAttribute['terms'] = DEFAULT_STATE.futureActionTerms;\n                newAttribute['taxonomy'] = DEFAULT_STATE.futureActionTaxonomy;\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute({'action': value});\n        }\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n            debugLog('handleDateChange', value, date);\n\n            setFutureActionDate(date);\n            editPostAttribute({'date': date});\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute({'terms': value});\n        }\n\n        const getPostId = () => {\n            return select('core/editor').getCurrentPostId();\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = () => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n            setFutureActionEnabled(data.enabled);\n            setFutureAction(data.action);\n            setFutureActionDate(data.date);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                });\n            } else {\n                apiFetch({\n                    path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    apiFetch({\n                        path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            termsListByName[decodeEntities(term.name)] = term;\n                            termsListById[term.id] = decodeEntities(term.name);\n                        });\n\n                        setTermsListByName(termsListByName);\n                        setTermsListById(termsListById);\n                        setTaxonomyName(decodeEntities(taxAttributes.name));\n                    });\n                });\n            }\n        }\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n            debugLog('editPostAttribute', newAttribute, attribute);\n        }\n\n        const init = () => {\n            fetchFutureActionData();\n            fetchTerms();\n\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n            debugLog('futureActionEnabled', futureActionEnabled);\n            debugLog('isCleanNewPost', isCleanNewPost);\n\n            if (futureActionEnabled && isCleanNewPost) {\n                handleEnabledChange(true);\n            }\n        }\n\n        useEffect(init, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow>\n                            <DateTimePicker\n                                currentDate={futureActionDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is_12_hours}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.howToExpire}\n                            value={futureAction}\n                            options={config.actions_options}\n                            onChange={handleActionChange}\n                        />\n                        {futureAction.includes('category') &&\n                            (\n                                (isEmpty(keys(termsListByName)) && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                ))\n                                ||\n                                (\n                                    <FormTokenField\n                                        label={config.strings.expirationCategories + ` (${futureActionTaxonomy})`}\n                                        value={selectedTerms}\n                                        suggestions={Object.keys(termsListByName)}\n                                        onChange={handleTermsChange}\n                                        maxSuggestions={10}\n                                    />\n                                )\n                            )}\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    // Step 3: Connect the component to the Redux store\n    registerPlugin('publishpress-future-action', {\n        render: MyPluginDocumentSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","React","useEffect","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","apiFetch","debugLog","description","message","console","is_debug_enabled","debug","getDefaultState","defaultState","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","defaults","autoEnable","expireType","default_date","parseInt","Date","getTime","taxonomy","terms","split","map","term","DEFAULT_STATE","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","MyPluginDocumentSettingPanel","mapTermsFromIdToName","mapTermsFromNameToId","id","handleEnabledChange","isChecked","newAttribute","editPostAttribute","handleActionChange","value","handleDateChange","date","handleTermsChange","getPostId","getCurrentPostId","getPostType","getCurrentPostType","fetchFutureActionData","getEditedPostAttribute","enabled","fetchTerms","postType","path","per_page","then","list","forEach","cat","name","strings","category","context","taxAttributes","rest_base","attribute","publishpress_future_action","Object","entries","init","isCleanNewPost","selectedTerms","length","postExpirator","enablePostExpiration","is_12_hours","howToExpire","actions_options","includes","loading","expirationCategories","render","window","postExpiratorPanelConfig"],"sourceRoot":""}