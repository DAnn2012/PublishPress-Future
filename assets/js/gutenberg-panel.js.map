{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n    const {useEffect} = React;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const debugLog = (description, ...message) => {\n        if (console && config.is_debug_enabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: 0,\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null,\n            isFetchingTerms: false,\n        }\n\n        if (! config || ! config.defaults) {\n            return defaultState;\n        }\n\n        if (config.defaults.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.defaults.expireType) {\n            defaultState.futureAction = config.defaults.expireType;\n        }\n\n        if (config.default_date) {\n            defaultState.futureActionDate = parseInt(config.default_date);\n        } else {\n            defaultState.futureActionDate = new Date().getTime();\n        }\n\n        if (config.defaults.taxonomy) {\n            defaultState.futureActionTaxonomy = config.defaults.taxonomy;\n        }\n\n        if (config.defaults.terms) {\n            defaultState.futureActionTerms = config.defaults.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                // let date = new Date();\n                // let browserTimezoneOffset = date.getTimezoneOffset() * 60;\n                // let wpTimezoneOffset = config.timezone_offset * 60;\n                //\n                // debugLog('getFutureActionDate', state.futureActionDate, browserTimezoneOffset, wpTimezoneOffset);\n                //\n                // date.setTime((state.futureActionDate + browserTimezoneOffset + wpTimezoneOffset) * 1000);\n                // // date.setTime(state.futureActionDate * 1000);\n                //\n                // return date.getTime()/1000;\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const MyPluginDocumentSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n        const isFetchingTerms = useSelect((select) => select('publishpress-future/store').getIsFetchingTerms(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName,\n            setIsFetchingTerms\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n\n            const newAttribute = {\n                'enabled': isChecked\n            }\n\n            // User default values to other fields\n            if (isChecked) {\n                setFutureAction(DEFAULT_STATE.futureAction);\n                setFutureActionDate(DEFAULT_STATE.futureActionDate);\n                setFutureActionTerms(DEFAULT_STATE.futureActionTerms);\n                setFutureActionTaxonomy(DEFAULT_STATE.futureActionTaxonomy);\n\n                newAttribute['action'] = DEFAULT_STATE.futureAction;\n                newAttribute['date'] = DEFAULT_STATE.futureActionDate;\n                newAttribute['terms'] = DEFAULT_STATE.futureActionTerms;\n                newAttribute['taxonomy'] = DEFAULT_STATE.futureActionTaxonomy;\n\n                fetchTerms();\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute({'action': value});\n        }\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n\n            setFutureActionDate(date);\n            editPostAttribute({'date': date});\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute({'terms': value});\n        }\n\n        const getPostId = () => {\n            return select('core/editor').getCurrentPostId();\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = (callback) => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n\n            setFutureActionEnabled(data.enabled).then(callback);\n            setFutureAction(data.action);\n            setFutureActionDate(data.date);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            debugLog('fetchTerms', 'Fetching terms...');\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            setIsFetchingTerms(true);\n\n            debugLog('futureActionTaxonomy', futureActionTaxonomy);\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                debugLog('fetchTerms', 'Fetching categories...');\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    debugLog('list', list);\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                    setIsFetchingTerms(false);\n                });\n            } else {\n                debugLog('fetchTerms', 'Fetching taxonomies...');\n                apiFetch({\n                    path: addQueryArgs(`publishpress-future/v1/taxonomies/` + postType),\n                }).then((response) => {\n                    debugLog('taxonomies', response.taxonomies);\n\n                    if (response.taxonomies.length > 0) {\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                        }).then((taxAttributes) => {\n                            debugLog('taxAttributes', taxAttributes);\n                            // fetch all terms\n                            apiFetch({\n                                path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                            }).then((terms) => {\n                                debugLog('terms', terms);\n                                terms.forEach(term => {\n                                    termsListByName[decodeEntities(term.name)] = term;\n                                    termsListById[term.id] = decodeEntities(term.name);\n                                });\n\n                                setTermsListByName(termsListByName);\n                                setTermsListById(termsListById);\n                                setTaxonomyName(decodeEntities(taxAttributes.name));\n                                setIsFetchingTerms(false);\n                            });\n                        });\n                    } else {\n                        debugLog('fetchTerms', 'No taxonomies found');\n                    }\n                });\n            }\n        }\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n            debugLog('editPostAttribute', newAttribute, attribute);\n        }\n\n        useEffect(() => {\n            fetchFutureActionData();\n\n            // We need to get the value directly from the store because the value from the state is not updated yet\n            const enabled = select('publishpress-future/store').getFutureActionEnabled();\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n\n            debugLog('enabled', enabled);\n            debugLog('isCleanNewPost', isCleanNewPost);\n\n            if (enabled) {\n                if (isCleanNewPost) {\n                    handleEnabledChange(true);\n                }\n\n                fetchTerms();\n            }\n        }, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.postExpirator} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow>\n                            <DateTimePicker\n                                currentDate={futureActionDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is_12_hours}\n                                startOfWeek={config.start_of_week}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.howToExpire}\n                            value={futureAction}\n                            options={config.actions_options}\n                            onChange={handleActionChange}\n                        />\n\n                        {\n                            futureAction.includes('category') && (\n                                isFetchingTerms && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                )\n                                || (\n                                    isEmpty(keys(termsListByName)) && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={config.strings.expirationCategories + ` (${futureActionTaxonomy})`}\n                                            value={selectedTerms}\n                                            suggestions={Object.keys(termsListByName)}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        }\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    // Step 3: Connect the component to the Redux store\n    registerPlugin('publishpress-future-action', {\n        render: MyPluginDocumentSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","React","useEffect","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","apiFetch","debugLog","description","message","console","is_debug_enabled","debug","getDefaultState","defaultState","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","isFetchingTerms","defaults","autoEnable","expireType","default_date","parseInt","Date","getTime","taxonomy","terms","split","map","term","DEFAULT_STATE","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","getIsFetchingTerms","MyPluginDocumentSettingPanel","mapTermsFromIdToName","mapTermsFromNameToId","id","handleEnabledChange","isChecked","newAttribute","fetchTerms","editPostAttribute","handleActionChange","value","handleDateChange","date","handleTermsChange","getPostId","getCurrentPostId","getPostType","getCurrentPostType","fetchFutureActionData","callback","getEditedPostAttribute","enabled","then","postType","path","per_page","list","forEach","cat","name","strings","category","response","taxonomies","length","context","taxAttributes","rest_base","attribute","publishpress_future_action","Object","entries","isCleanNewPost","selectedTerms","postExpirator","enablePostExpiration","is_12_hours","start_of_week","howToExpire","actions_options","includes","loading","noTermsFound","expirationCategories","render","window","postExpiratorPanelConfig"],"sourceRoot":""}